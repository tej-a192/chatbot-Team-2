`.env`

```
#REACT_APP_API_BASE_URL=http://localhost:5001/api
# OR for Vite:
VITE_API_BASE_URL=http://localhost:5001/api






```

`code.txt`

```

```

`eslint.config.js`

```javascript
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'

export default [
  { ignores: ['dist'] },
  {
    files: ['**/*.{js,jsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...js.configs.recommended.rules,
      ...reactHooks.configs.recommended.rules,
      'no-unused-vars': ['error', { varsIgnorePattern: '^[A-Z_]' }],
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
]

```

`index.html`

```html
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>

```

`o.txt`

```

```

`postcss.config.js`

```javascript
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

```

`src/App.css`

```css
/* #root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
} */

```

`src/App.jsx`

```javascript
// import React, { useState, useEffect, useCallback } from 'react';
// import { useAuth } from './hooks/useAuth.jsx';
// import { useAppState } from './contexts/AppStateContext.jsx';
// import AuthModal from './components/auth/AuthModal.jsx';
// import TopNav from './components/layout/TopNav.jsx';
// import LeftPanel from './components/layout/LeftPanel.jsx';
// import CenterPanel from './components/layout/CenterPanel.jsx';
// import RightPanel from './components/layout/RightPanel.jsx';
// import LeftCollapsedNav from './components/layout/LeftCollapsedNav.jsx';
// import RightCollapsedNav from './components/layout/RightCollapsedNav.jsx';
// import ChatHistoryModal from './components/chat/ChatHistoryModal.jsx';
// import api from './services/api.js';
// import toast from 'react-hot-toast';
// import { motion, AnimatePresence } from 'framer-motion';

// // For this Version 1:
// // - AuthContext.jsx should have BYPASS_AUTH_FOR_DEVELOPMENT = true
// // - AppStateContext.jsx should have INITIALIZE_WITH_DEV_SESSION = true
// // - api.js should have DEV_MODE_MOCK_API = true

// function App() {
//     const { 
//         token, 
//         user, 
//         loading: authLoading, 
//         logout,
//         isTestingMode // This flag comes from AuthContext (BYPASS_AUTH_FOR_DEVELOPMENT)
//     } = useAuth();

//     const { 
//         theme, 
//         isLeftPanelOpen, 
//         isRightPanelOpen, 
//         currentSessionId, 
//         setSessionId: setGlobalSessionId 
//     } = useAppState();
    
//     const [appInitializing, setAppInitializing] = useState(true); 
//     const [showAuthModal, setShowAuthModal] = useState(false); 
//     const [messages, setMessages] = useState([]);
//     const [chatStatus, setChatStatus] = useState('Ready.');
//     const [orchestratorStatus, setOrchestratorStatus] = useState({ status: "loading", message: "Connecting..." });
//     const [isHistoryModalOpen, setIsHistoryModalOpen] = useState(false);

//     useEffect(() => {
//         const rootHtmlElement = document.documentElement;
//         rootHtmlElement.classList.remove('light', 'dark');
//         rootHtmlElement.classList.add(theme);
//         document.body.className = ''; 
//         document.body.classList.add(theme === 'dark' ? 'bg-background-dark' : 'bg-background-light');
//         console.log("App.jsx: Theme applied -", theme);
//     }, [theme]);

//     useEffect(() => {
//         console.log("App.jsx Auth Effect: authLoading:", authLoading, "isTestingMode:", isTestingMode, "Token:", token, "User:", user);
//         if (authLoading) {
//             setAppInitializing(true);
//             return;
//         }

//         if (isTestingMode && user && token) {
//             console.log("App.jsx: Auth Bypassed by Context. User:", user);
//             setShowAuthModal(false);
//             if (!currentSessionId) {
//                 const devSession = localStorage.getItem('aiTutorSessionId') || `dev-main-app-session-${Date.now()}`;
//                 setGlobalSessionId(devSession);
//                 console.log("App.jsx: Initializing dev session:", devSession);
//             }
//         } else if (!token) {
//             console.log("App.jsx: No token, showing AuthModal.");
//             setShowAuthModal(true);
//         } else { 
//             console.log("App.jsx: Token exists, user authenticated (or will be shortly).");
//             setShowAuthModal(false);
//             if (user && !currentSessionId) { // User object is set, but no session yet
//                 api.startNewSession().then(data => setGlobalSessionId(data.sessionId));
//             }
//         }
//         setAppInitializing(false);
//     }, [token, user, authLoading, currentSessionId, setGlobalSessionId, isTestingMode]);

//     useEffect(() => { 
//         api.getOrchestratorStatus().then(setOrchestratorStatus);
//         // Interval removed for brevity in this version, can be added back if needed
//     }, []);

//     const fetchChatHistory = useCallback(async (sid) => {
//         if (!sid || (!token && !isTestingMode)) {
//              setMessages([]); 
//              setChatStatus( (token || isTestingMode) ? "Select or start a chat." : "Please login.");
//              return; 
//         }
//         setChatStatus("Loading mock history...");
//         try {
//             const historyData = await api.getChatHistory(sid); // Mocked call
//             const formattedMessages = (Array.isArray(historyData) ? historyData : []).map(msg => ({
//                 id: msg.id || msg._id || String(Math.random() + Date.now()),
//                 sender: msg.sender || (msg.role === 'model' ? 'bot' : 'user'),
//                 text: msg.parts?.[0]?.text || msg.text || '',
//                 thinking: msg.thinking, references: msg.references || [],
//                 timestamp: msg.timestamp || new Date().toISOString(),
//                 source_pipeline: msg.source_pipeline
//             }));
//             setMessages(formattedMessages);
//             setChatStatus(formattedMessages.length > 0 ? "Mock history loaded." : "Chat empty.");
//         } catch (error) {
//             toast.error("Mock history load failed (check api.js mocks).");
//             setChatStatus("Error loading mock history.");
//         }
//     }, [token, isTestingMode]); 

//     useEffect(() => {
//         if (currentSessionId && (token || isTestingMode)) { // Check isTestingMode too for bypassed auth
//             fetchChatHistory(currentSessionId);
//         }
//     }, [currentSessionId, token, isTestingMode, fetchChatHistory]);

//     const handleAuthSuccess = (authData) => {
//         setShowAuthModal(false);
//         if (authData?.sessionId) setGlobalSessionId(authData.sessionId);
//         else if (token && !currentSessionId) { // Fallback
//              api.startNewSession().then(data => setGlobalSessionId(data.sessionId));
//         }
//         // User state is managed by AuthContext
//     };
    
//     const handleLogout = () => {
//         logout(); 
//         setGlobalSessionId(null);
//         setMessages([]);
//         if (!isTestingMode) setShowAuthModal(true); 
//         else console.log("App.jsx (V1): Mock logout. To see AuthModal, disable bypass in AuthContext.");
//         toast.success("Logged out (mock).");
//     };

//     const handleNewChat = async () => { 
//         const data = await api.startNewSession(); // Mocked
//         setGlobalSessionId(data.sessionId);
//         setMessages([]); 
//         setChatStatus("New mock chat!");
//         toast.success("New mock chat started!");
//     };

//     const handleSelectSessionFromHistory = (sessionId) => {
//         if (sessionId) setGlobalSessionId(sessionId);
//         setIsHistoryModalOpen(false); 
//     };

//     if (appInitializing || (authLoading && !isTestingMode)) { 
//         return (
//             <div className="fixed inset-0 flex flex-col items-center justify-center bg-background-dark text-text-dark">
//                 <div className="animate-spin rounded-full h-12 w-12 border-t-4 border-b-4 border-primary mb-4"></div>
//                 <p className="text-xl">Initializing AI Tutor...</p>
//             </div>
//         );
//     }

//     // Determine if main app should render based on auth state (bypassed or real)
//     const canRenderMainApp = (isTestingMode && user && token) || (!isTestingMode && user && token);

//     return (
//         <div className={`flex flex-col h-screen overflow-hidden font-sans ${theme}`}>
//             <AnimatePresence>
//                 {!canRenderMainApp && showAuthModal && ( // Show AuthModal if not authenticated and not bypassed
//                     <AuthModal isOpen={true} onClose={handleAuthSuccess} />
//                 )}
//             </AnimatePresence>

//             {canRenderMainApp && (
//                 <>
//                     <TopNav
//                         user={user}
//                         onLogout={handleLogout}
//                         onNewChat={handleNewChat}
//                         onHistoryClick={() => setIsHistoryModalOpen(true)}
//                         orchestratorStatus={orchestratorStatus}
//                     />
//                     <div className="flex flex-1 overflow-hidden pt-16 bg-background-light dark:bg-background-dark">
//                         <AnimatePresence mode="wait">
//                             {isLeftPanelOpen ? (
//                                 <motion.aside 
//                                     key="left-panel-main"
//                                     initial={{ x: '-100%', opacity: 0 }}
//                                     animate={{ x: '0%', opacity: 1 }}
//                                     exit={{ x: '-100%', opacity: 0 }}
//                                     transition={{ type: 'spring', stiffness: 300, damping: 30 }}
//                                     className="w-full md:w-72 lg:w-80 xl:w-96 bg-surface-light dark:bg-surface-dark border-r border-border-light dark:border-border-dark overflow-y-auto p-3 sm:p-4 shadow-lg flex-shrink-0 custom-scrollbar"
//                                 >
//                                     <LeftPanel /> 
//                                 </motion.aside>
//                             ) : (
//                                 <LeftCollapsedNav />
//                             )}
//                         </AnimatePresence>
                        
//                         <main className={`flex-1 flex flex-col overflow-hidden p-1 sm:p-2 md:p-4 
//                                          transition-all duration-300 ease-in-out
//                                          ${isLeftPanelOpen ? 'lg:ml-0' : 'lg:ml-16 md:ml-14'} 
//                                          ${isRightPanelOpen ? 'lg:mr-0' : 'lg:mr-16 md:mr-14'}`}>
//                            <CenterPanel 
//                                 messages={messages} 
//                                 setMessages={setMessages} 
//                                 currentSessionId={currentSessionId}
//                                 chatStatus={chatStatus}
//                                 setChatStatus={setChatStatus}
//                             />
//                         </main>

//                         <AnimatePresence mode="wait">
//                             {isRightPanelOpen ? (
//                                 <motion.aside 
//                                     key="right-panel-main"
//                                     initial={{ x: '100%', opacity: 0 }}
//                                     animate={{ x: '0%', opacity: 1 }}
//                                     exit={{ x: '100%', opacity: 0 }}
//                                     transition={{ type: 'spring', stiffness: 300, damping: 30 }}
//                                     className="hidden md:flex md:flex-col md:w-72 lg:w-80 xl:w-96 bg-surface-light dark:bg-surface-dark border-l border-border-light dark:border-border-dark overflow-y-auto p-3 sm:p-4 shadow-lg flex-shrink-0 custom-scrollbar"
//                                 >
//                                     <RightPanel />
//                                 </motion.aside>
//                             ) : (
//                                 <RightCollapsedNav />
//                             )}
//                         </AnimatePresence>
//                     </div>
                    
//                     <ChatHistoryModal
//                         isOpen={isHistoryModalOpen}
//                         onClose={() => setIsHistoryModalOpen(false)}
//                         onSelectSession={handleSelectSessionFromHistory}
//                     />
//                 </>
//             )}
            
//             {/* Fallback for unexpected state where app is not initializing, user not logged in, and modal isn't forced */}
//             { !appInitializing && !canRenderMainApp && !showAuthModal && (
//                  <div className="fixed inset-0 flex flex-col items-center justify-center bg-background-light dark:bg-background-dark text-text-light dark:text-text-dark">
//                      <p className="text-xl">Error in application state. Please <button 
//                         onClick={()=> { setShowAuthModal(true); }} 
//                         className="text-primary hover:underline font-semibold"
//                         >try logging in</button>.</p>
//                  </div>
//             )}
//         </div>
//     );
// }

// export default App;












import React, { useState, useEffect, useCallback } from 'react';
import { useAuth } from './hooks/useAuth.jsx';
import { useAppState } from './contexts/AppStateContext.jsx';
import AuthModal from './components/auth/AuthModal.jsx';
import TopNav from './components/layout/TopNav.jsx';
import LeftPanel from './components/layout/LeftPanel.jsx';
import CenterPanel from './components/layout/CenterPanel.jsx';
import RightPanel from './components/layout/RightPanel.jsx';
import LeftCollapsedNav from './components/layout/LeftCollapsedNav.jsx';
import RightCollapsedNav from './components/layout/RightCollapsedNav.jsx';
import ChatHistoryModal from './components/chat/ChatHistoryModal.jsx';
import api from './services/api.js'; // This will use MOCKED API if api.js is set to DEV_MODE_MOCK_API = true
import toast from 'react-hot-toast';
import { motion, AnimatePresence } from 'framer-motion';

function App() {
    const { 
        token, 
        user, 
        loading: authLoadingFromContext, // Renamed to avoid conflict with appInitializing
        logout, 
        setUser: setAuthUser, // From AuthContext, to update user details if login response has more
    } = useAuth();

    const { 
        theme, 
        isLeftPanelOpen, 
        isRightPanelOpen, 
        currentSessionId, 
        setSessionId: setGlobalSessionId 
    } = useAppState();
    
    // Local state for App.jsx's own initialization step AFTER AuthContext is ready
    const [appInitializing, setAppInitializing] = useState(true); 
    const [showAuthModal, setShowAuthModal] = useState(false); // Controls AuthModal visibility
    const [messages, setMessages] = useState([]);
    const [chatStatus, setChatStatus] = useState('Ready. Send a message to start!');
    const [orchestratorStatus, setOrchestratorStatus] = useState({ status: "loading", message: "Connecting..." });
    const [isHistoryModalOpen, setIsHistoryModalOpen] = useState(false);

    // Effect to apply Tailwind dark/light mode class to HTML element
    useEffect(() => {
        const rootHtmlElement = document.documentElement;
        rootHtmlElement.classList.remove('light', 'dark'); // Clear previous
        rootHtmlElement.classList.add(theme); // Add current
        // Optional: If you have body-specific theme styles for elements not covered by Tailwind's dark: prefix
        document.body.className = ''; 
        document.body.classList.add(theme === 'dark' ? 'bg-background-dark' : 'bg-background-light');
        console.log("App.jsx: Theme effect, theme is:", theme);
    }, [theme]);

    // Effect to handle initial authentication status and session setup
    useEffect(() => {
        console.log("App.jsx: Auth/Session useEffect. authLoading:", authLoadingFromContext, "Token:", token, "User:", user, "SessionId:", currentSessionId);
        if (authLoadingFromContext) {
            console.log("App.jsx: AuthContext is loading. App initializing...");
            setAppInitializing(true); // Show app loader while AuthContext determines auth state
            return;
        }

        // AuthContext has finished its loading
        console.log("App.jsx: AuthContext finished loading. Token:", token);
        if (!token) { // No token means user is not logged in
            console.log("App.jsx: No token. Showing AuthModal.");
            setShowAuthModal(true);
            setAppInitializing(false); // Done with this phase of init, modal will show
        } else { // Token exists, user is considered logged in
            console.log("App.jsx: Token exists. Hiding AuthModal. User:", user);
            setShowAuthModal(false); 
            // If user is logged in (token exists, user object should be set by AuthContext soon if not already)
            // AND there's no currentSessionId in AppStateContext, try to get/start one.
            if (user && !currentSessionId) { 
                console.log("App.jsx: User authenticated, but no currentSessionId. Starting new session via API.");
                api.startNewSession() // This will be a MOCKED call in V1
                    .then(data => {
                        if (data && data.sessionId) {
                            setGlobalSessionId(data.sessionId);
                            console.log("App.jsx: New session started/set from API:", data.sessionId);
                        } else {
                            console.error("App.jsx: Mock api.startNewSession did not return sessionId.");
                            toast.error("Could not initialize session (mock error).");
                        }
                    })
                    .catch(err => {
                        toast.error("Failed to start new session (mock error).");
                        console.error("App.jsx: Error starting new session (mock):", err);
                    });
            } else if (!user && token) {
                // This is an edge case: token present, but user object from AuthContext not yet propagated.
                // AuthContext's useEffect should set the user. We can wait or re-check.
                console.warn("App.jsx: Token exists, but user object is pending. Waiting for AuthContext to update user.");
                setAppInitializing(true); // Remain in initializing state until user object is available
                return; // Skip setting appInitializing to false yet
            }
            setAppInitializing(false); // Done with app-level init for authenticated user
        }
    }, [token, user, authLoadingFromContext, currentSessionId, setGlobalSessionId]);


    // Effect to fetch orchestrator status (uses mocked API in V1)
    useEffect(() => {
        api.getOrchestratorStatus().then(statusData => {
            setOrchestratorStatus(statusData);
            console.log("App.jsx: Orchestrator status fetched (mocked):", statusData);
        });
        // Interval for status check can be added later for V2
    }, []);

    // Effect to fetch chat history when session ID or token changes
    const fetchChatHistory = useCallback(async (sid) => {
        if (!sid || !token) {
            setMessages([]);
            setChatStatus(token ? "Start or select a chat." : "Please login.");
            return;
        }
        setChatStatus("Loading chat history (mocked)...");
        try {
            const historyData = await api.getChatHistory(sid); // Mocked call
            const formattedMessages = (Array.isArray(historyData) ? historyData : []).map(msg => ({
                id: msg.id || msg._id || String(Math.random() + Date.now()),
                sender: msg.sender || (msg.role === 'model' ? 'bot' : 'user'),
                text: msg.parts?.[0]?.text || msg.text || '',
                thinking: msg.thinking, references: msg.references || [],
                timestamp: msg.timestamp || new Date().toISOString(),
                source_pipeline: msg.source_pipeline
            }));
            setMessages(formattedMessages);
            setChatStatus(formattedMessages.length > 0 ? "Mock history loaded." : "Chat is empty (mock).");
        } catch (error) {
            toast.error(`Mock history load failed: ${error.message}`);
            setChatStatus("Error loading mock history.");
        }
    }, [token]); 

    useEffect(() => {
        if (currentSessionId && token) {
            fetchChatHistory(currentSessionId);
        } else if (!token) { // If token becomes null (e.g., after logout)
            setMessages([]);
            setChatStatus("Please login.");
        }
    }, [currentSessionId, token, fetchChatHistory]);

    // Callback for AuthModal upon successful login/signup (or dev login)
    const handleAuthSuccess = (authData) => {
        console.log("App.jsx: handleAuthSuccess called with data:", authData);
        setShowAuthModal(false); // Close the modal
        // AuthContext should have already set the token and user.
        // App.jsx primarily needs to ensure the session ID is handled.
        if (authData && authData.sessionId) {
            setGlobalSessionId(authData.sessionId);
        } else if (token && !currentSessionId) { // Fallback: if logged in but no session came from authData
            api.startNewSession().then(data => setGlobalSessionId(data.sessionId));
        }
        // If authData (from backend login/signup) has more complete user info than what jwtDecode provided
        if(authData && authData.username && authData._id){
            setAuthUser({username: authData.username, id: authData._id}); 
        }
    };
    
    // Handler for logout action
    const handleLogoutAndShowModal = () => {
        logout(); // From AuthContext - clears token, user in context and localStorage
        setGlobalSessionId(null); // Clear session in AppStateContext
        localStorage.removeItem('aiTutorSessionId'); // Also clear from localStorage directly
        setMessages([]);
        setChatStatus("Logged out. Please login.");
        setShowAuthModal(true); // Show AuthModal after logout
        toast.success("Logged out successfully.");
    };

    // Handler for "New Chat" button
    const handleNewChat = async () => {
        try {
            const data = await api.startNewSession(); // Mocked API call
            setGlobalSessionId(data.sessionId);
            setMessages([]); 
            setChatStatus("New chat started (mock).");
            toast.success("New mock chat started!");
        } catch (error) {
            toast.error("Failed to start new mock chat.");
        }
    };

    // Handler for when a session is selected from ChatHistoryModal
    const handleSelectSessionFromHistory = (sessionId) => {
        if (sessionId && sessionId !== currentSessionId) {
            setGlobalSessionId(sessionId); 
            // fetchChatHistory will be called by its useEffect
            toast.success(`Loading mock session...`);
        } else if (sessionId === currentSessionId) {
            toast.info("This session is already loaded.");
        }
        setIsHistoryModalOpen(false); 
    };

    // Render initial loading spinner if app or auth context is still initializing
    if (appInitializing || authLoadingFromContext) { 
        return (
            <div className="fixed inset-0 flex flex-col items-center justify-center bg-background-light dark:bg-background-dark text-text-light dark:text-text-dark">
                <div className="animate-spin rounded-full h-12 w-12 border-t-4 border-b-4 border-primary mb-4"></div>
                <p className="text-xl">Initializing AI Tutor...</p>
            </div>
        );
    }

    return (
        <div className={`flex flex-col h-screen overflow-hidden font-sans ${theme}`}>
            <AnimatePresence>
                {showAuthModal && !token && ( // Show AuthModal if flag is true AND user is not authenticated
                    <AuthModal 
                        isOpen={showAuthModal} 
                        onClose={handleAuthSuccess} 
                    />
                )}
            </AnimatePresence>

            {/* Render main application UI if user is authenticated (token and user exist) */}
            {(token && user) && (
                <>
                    <TopNav
                        user={user}
                        onLogout={handleLogoutAndShowModal}
                        onNewChat={handleNewChat}
                        onHistoryClick={() => setIsHistoryModalOpen(true)}
                        orchestratorStatus={orchestratorStatus}
                    />
                    <div className="flex flex-1 overflow-hidden pt-16 bg-background-light dark:bg-background-dark">
                        {/* Left Panel Area */}
                        <AnimatePresence mode="wait">
                            {isLeftPanelOpen ? (
                                <motion.aside 
                                    key="left-panel-main"
                                    initial={{ x: '-100%', opacity: 0 }}
                                    animate={{ x: '0%', opacity: 1 }}
                                    exit={{ x: '-100%', opacity: 0 }}
                                    transition={{ type: 'spring', stiffness: 300, damping: 30 }}
                                    className="w-full md:w-72 lg:w-80 xl:w-96 bg-surface-light dark:bg-surface-dark border-r border-border-light dark:border-border-dark overflow-y-auto p-3 sm:p-4 shadow-lg flex-shrink-0 custom-scrollbar"
                                >
                                    <LeftPanel /> 
                                </motion.aside>
                            ) : (
                                <LeftCollapsedNav /> // Shows icons and open button
                            )}
                        </AnimatePresence>
                        
                        {/* Center Panel */}
                        <main className={`flex-1 flex flex-col overflow-hidden p-1 sm:p-2 md:p-4 
                                         transition-all duration-300 ease-in-out
                                         ${isLeftPanelOpen ? 'lg:ml-0' : 'lg:ml-16 md:ml-14'} 
                                         ${isRightPanelOpen ? 'lg:mr-0' : 'lg:mr-16 md:mr-14'}`}>
                           <CenterPanel 
                                messages={messages} 
                                setMessages={setMessages} 
                                currentSessionId={currentSessionId}
                                chatStatus={chatStatus}
                                setChatStatus={setChatStatus}
                            />
                        </main>

                        {/* Right Panel Area */}
                        <AnimatePresence mode="wait">
                            {isRightPanelOpen ? (
                                <motion.aside 
                                    key="right-panel-main"
                                    initial={{ x: '100%', opacity: 0 }}
                                    animate={{ x: '0%', opacity: 1 }}
                                    exit={{ x: '100%', opacity: 0 }}
                                    transition={{ type: 'spring', stiffness: 300, damping: 30 }}
                                    className="hidden md:flex md:flex-col md:w-72 lg:w-80 xl:w-96 bg-surface-light dark:bg-surface-dark border-l border-border-light dark:border-border-dark overflow-y-auto p-3 sm:p-4 shadow-lg flex-shrink-0 custom-scrollbar"
                                >
                                    <RightPanel />
                                </motion.aside>
                            ) : (
                                <RightCollapsedNav /> // Shows icons and open button
                            )}
                        </AnimatePresence>
                    </div>
                    
                    {/* Chat History Modal */}
                    <ChatHistoryModal
                        isOpen={isHistoryModalOpen}
                        onClose={() => setIsHistoryModalOpen(false)}
                        onSelectSession={handleSelectSessionFromHistory}
                    />
                </>
            )}
            
            {/* Fallback UI if not initializing, not authenticated, and AuthModal isn't showing (should be rare) */}
            { !appInitializing && !token && !showAuthModal && (
                 <div className="fixed inset-0 flex flex-col items-center justify-center bg-background-light dark:bg-background-dark text-text-light dark:text-text-dark">
                     <p className="text-xl">Please <button 
                        onClick={()=> { setShowAuthModal(true); }} 
                        className="text-primary hover:underline font-semibold"
                        >log in</button> to continue.</p>
                 </div>
            )}
        </div>
    );
}

export default App;
```

`src/components/analysis/AnalysisTool.jsx`

```javascript
// frontend/src/components/analysis/AnalysisTool.jsx
import React, { useState } from 'react';
import api from '../../services/api.js'; // Assuming .js for services
import toast from 'react-hot-toast';
import MindmapViewer from './MindmapViewer.jsx';
import { ChevronDown, ChevronUp, Loader2, AlertTriangle } from 'lucide-react'; // Loader2 is imported once here
import * as LucideIcons from 'lucide-react'; // For dynamic icon selection by name
import { marked } from 'marked';
import Button from '../core/Button.jsx';
import IconButton from '../core/IconButton.jsx'; // Import IconButton
import { motion } from 'framer-motion'; // Import motion

// Configure marked for consistent rendering
marked.setOptions({
  breaks: true,
  gfm: true,
});

const createMarkup = (markdownText) => {
    if (!markdownText) return { __html: '' };
    const rawHtml = marked.parse(markdownText);
    // For production, consider DOMPurify:
    // import DOMPurify from 'dompurify';
    // const cleanHtml = DOMPurify.sanitize(rawHtml);
    // return { __html: cleanHtml };
    return { __html: rawHtml };
};

const escapeHtml = (unsafe) => { // Helper for <pre> tags if thinking content isn't markdown
    if (typeof unsafe !== 'string') return '';
    return unsafe
         .replace(/&/g, "&")
         .replace(/</g, "<")
         .replace(/>/g, ">")
         .replace(/"/g, '"')
         .replace(/'/g, "'");
};

function AnalysisTool({ toolType, title, iconName, selectedDocumentFilename }) {
    const [isOpen, setIsOpen] = useState(false);
    const [result, setResult] = useState(null);
    const [thinking, setThinking] = useState(null);
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState('');

    // Dynamically select icon component based on iconName prop
    const IconComponent = LucideIcons[iconName] || LucideIcons.HelpCircle; // Default to HelpCircle if not found

    const handleRunAnalysis = async () => {
        if (!selectedDocumentFilename) {
            toast.error("Please select a document from the left panel first.");
            return;
        }
        setIsLoading(true);
        setError('');
        setResult(null);
        setThinking(null);
        const toastId = toast.loading(`Generating ${title} for ${selectedDocumentFilename}...`);

        try {
            const payload = { filename: selectedDocumentFilename, analysis_type: toolType };
            const response = await api.requestAnalysis(payload); // Mocked in V1
            setResult(response.content);
            setThinking(response.thinking);
            setIsOpen(true); 
            toast.success(`${title} generated (mock data)!`, { id: toastId });
        } catch (err) {
            const errorMessage = err.response?.data?.message || err.message || `Failed to generate ${title}.`;
            setError(errorMessage);
            toast.error(errorMessage, { id: toastId });
            console.error("AnalysisTool Error:", err);
        } finally {
            setIsLoading(false);
        }
    };

    return (
        <div className="card-base p-3"> {/* Use themed card style from index.css */}
            <div className="flex items-center justify-between">
                <button 
                    onClick={() => setIsOpen(!isOpen)}
                    className="flex items-center gap-2 text-sm font-medium text-text-light dark:text-text-dark focus:outline-none w-full text-left hover:text-primary dark:hover:text-primary-light transition-colors"
                    aria-expanded={isOpen}
                >
                    <IconComponent size={16} className="text-primary dark:text-primary-light flex-shrink-0" />
                    <span className="flex-grow">{title}</span>
                </button>
                <div className="flex items-center gap-1 flex-shrink-0">
                    <Button
                        onClick={handleRunAnalysis}
                        variant="primary" 
                        size="sm"
                        className="!px-3 !py-1 text-xs" // Override Button padding for smaller size
                        isLoading={isLoading} // Button component handles its own loader icon
                        disabled={isLoading || !selectedDocumentFilename}
                        title={!selectedDocumentFilename ? "Select a document first" : `Run ${title} Analysis`}
                    >
                       Run
                    </Button>
                    <IconButton 
                        icon={isOpen ? ChevronUp : ChevronDown} 
                        onClick={() => setIsOpen(!isOpen)} 
                        size="sm" 
                        variant="ghost"
                        className="p-1" // Ensure IconButton has padding if its default is too large
                        aria-label={isOpen ? "Collapse section" : "Expand section"}
                    />
                </div>
            </div>

            {isOpen && (
                <motion.div 
                    initial={{ height: 0, opacity: 0 }} 
                    animate={{ height: 'auto', opacity: 1 }} 
                    exit={{ height: 0, opacity: 0 }}
                    transition={{ duration: 0.2, ease: "easeInOut" }}
                    className="mt-2 pt-2 border-t border-border-light dark:border-border-dark overflow-hidden" 
                >
                    <div className="space-y-2"> {/* Added wrapper for consistent spacing */}
                        {isLoading && (
                            <p className="text-xs text-text-muted-light dark:text-text-muted-dark p-2 flex items-center gap-2">
                                <Loader2 size={14} className="animate-spin"/>Generating...
                            </p>
                        )}
                        {error && (
                            <div className="p-2 bg-red-500/10 border border-red-500/30 text-red-600 dark:text-red-300 rounded-md text-xs flex items-center gap-1">
                                <AlertTriangle size={14} /> {error}
                            </div>
                        )}
                        {thinking && !error && (
                            <details className="text-xs" open={!!result}> {/* Open if result is also present */}
                                <summary className="cursor-pointer text-text-muted-light dark:text-text-muted-dark hover:text-primary dark:hover:text-primary-light font-medium">
                                    AI Reasoning
                                </summary>
                                <pre className="mt-1 p-1.5 bg-gray-100 dark:bg-gray-900 rounded text-[0.7rem] max-h-28 overflow-y-auto custom-scrollbar whitespace-pre-wrap break-words">
                                    <code>{escapeHtml(thinking)}</code>
                                </pre>
                            </details>
                        )}
                        {result && !error && (
                            toolType === 'mindmap' ? (
                                <MindmapViewer markdownContent={result} />
                            ) : (
                                <div 
                                    className="prose prose-xs dark:prose-invert max-w-none text-text-light dark:text-text-dark p-1 max-h-60 overflow-y-auto custom-scrollbar text-[0.75rem] leading-relaxed"
                                    dangerouslySetInnerHTML={createMarkup(result)}
                                />
                            )
                        )}
                        {!isLoading && !result && !error && !selectedDocumentFilename && (
                             <p className="text-xs text-text-muted-light dark:text-text-muted-dark p-2">Select a document to run analysis.</p>
                        )}
                         {!isLoading && !result && !error && selectedDocumentFilename && (
                             <p className="text-xs text-text-muted-light dark:text-text-muted-dark p-2">Click "Run" to generate analysis.</p>
                        )}
                    </div>
                </motion.div>
            )}
        </div>
    );
}
export default AnalysisTool;
```

`src/components/analysis/MindmapViewer.jsx`

```javascript
import React, { useEffect, useRef, useState } from 'react';
import toast from 'react-hot-toast';

// Ensure Markmap libraries are loaded globally from index.html (d3, markmap-lib, markmap-view, markmap-toolbar)

function MindmapViewer({ markdownContent }) {
    const svgRef = useRef(null);
    const [markmapInstance, setMarkmapInstance] = useState(null);
    const [toolbarInstance, setToolbarInstance] = useState(null);
    const { Transformer, Markmap, Toolbar } = window.markmap; // Access global markmap

    useEffect(() => {
        if (!markdownContent || !svgRef.current || !Transformer || !Markmap || !Toolbar) {
            if (svgRef.current) svgRef.current.innerHTML = ''; // Clear previous
            return;
        }
        
        let mm, tb;
        try {
            // Cleanup previous instances if they exist
            if (markmapInstance && typeof markmapInstance.destroy === 'function') {
                markmapInstance.destroy();
            }
            if (toolbarInstance && toolbarInstance.el && toolbarInstance.el.parentNode) {
                toolbarInstance.el.parentNode.removeChild(toolbarInstance.el);
            }

            const transformer = new Transformer();
            const { root, features } = transformer.transform(markdownContent);
            
            svgRef.current.innerHTML = ''; // Clear before re-rendering
            mm = Markmap.create(svgRef.current, null, root); // Create new Markmap
            setMarkmapInstance(mm);

            // Create and prepend toolbar
            tb = Toolbar.create(mm);
            svgRef.current.parentNode.insertBefore(tb.el, svgRef.current);
            setToolbarInstance(tb);
            
            // Auto-fit after a short delay to ensure rendering is complete
            setTimeout(() => mm.fit(), 100);

        } catch (e) {
            console.error("Error rendering Markmap:", e);
            toast.error("Failed to render mind map. Check console for details.");
            if (svgRef.current) svgRef.current.innerHTML = '<p class="text-xs text-red-500 p-2">Error rendering mind map. Invalid Markdown for mind map?</p>';
        }
        
        // Cleanup function for when component unmounts or markdownContent changes
        return () => {
            if (mm && typeof mm.destroy === 'function') {
                mm.destroy();
            }
            if (tb && tb.el && tb.el.parentNode) {
                tb.el.parentNode.removeChild(tb.el);
            }
        };
    // eslint-disable-next-line react-hooks/exhaustive-deps 
    }, [markdownContent]); // Rerun when markdownContent changes

    if (!markdownContent) {
        return <p className="text-xs text-text-muted-light dark:text-text-muted-dark p-2">No mind map data to display.</p>;
    }

    return (
        <div className="relative w-full h-80 md:h-96 my-2">
            {/* Toolbar will be prepended here by useEffect */}
            <svg ref={svgRef} className="w-full h-full border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-800 shadow-inner"></svg>
        </div>
    );
}

export default MindmapViewer;
```

`src/components/auth/AuthModal.jsx`

```javascript
// // frontend/src/components/auth/AuthModal.jsx
// import React, { useState, useEffect } from 'react';
// import { useAuth } from '../../hooks/useAuth.jsx';
// import { useAppState } from '../../contexts/AppStateContext.jsx';
// import LLMSelection from './LLMSelection.jsx';
// import api from '../../services/api.js'; // For V1, this will use mocked functions
// import toast from 'react-hot-toast';
// import { LogIn, UserPlus, X, Terminal, KeyRound, Link2, User as UserIcon } from 'lucide-react';
// import Button from '../core/Button.jsx';
// import { motion, AnimatePresence } from 'framer-motion'; // Assuming you're using AnimatePresence in App.jsx for this modal

// function AuthModal({ isOpen, onClose }) {
//     const { login, signup, devLogin, isTestingMode, DEV_MODE_ALLOW_DEV_LOGIN } = useAuth(); 
//     const { selectedLLM: globalSelectedLLM, switchLLM: setGlobalLLM } = useAppState();
    
//     const [isLoginView, setIsLoginView] = useState(true);
//     const [username, setUsername] = useState(isTestingMode || DEV_MODE_ALLOW_DEV_LOGIN ? 'DevUser' : '');
//     const [password, setPassword] = useState(isTestingMode || DEV_MODE_ALLOW_DEV_LOGIN ? 'devpass' : '');
//     const [localSelectedLLM, setLocalSelectedLLM] = useState(globalSelectedLLM || 'ollama');
//     const [geminiApiKey, setGeminiApiKey] = useState('');
//     const [ollamaApiUrl, setOllamaApiUrl] = useState('');
    
//     const [error, setError] = useState('');
//     const [loading, setLoading] = useState(false);

//     useEffect(() => {
//         if (isOpen) {
//             setUsername(isTestingMode || DEV_MODE_ALLOW_DEV_LOGIN ? 'DevUser' : '');
//             setPassword(isTestingMode || DEV_MODE_ALLOW_DEV_LOGIN ? 'devpass' : '');
//             setLocalSelectedLLM(globalSelectedLLM || 'ollama');
//             setGeminiApiKey('');
//             setOllamaApiUrl('');
//             setError('');
//         }
//     }, [isOpen, isLoginView, isTestingMode, DEV_MODE_ALLOW_DEV_LOGIN, globalSelectedLLM]);

//     const handleLlmChange = (llm) => setLocalSelectedLLM(llm);

//     const handleSubmit = async (e) => {
//         e.preventDefault();
//         if (!username.trim() || !password.trim()) {
//             setError("Username and password are required.");
//             toast.error("Username and password are required.");
//             return;
//         }
//         setError('');
//         setLoading(true);
//         const toastId = toast.loading(isLoginView ? 'Logging in...' : 'Signing up...');

//         try {
//             let response;
//             const apiPayload = { username, password };

//             if (isLoginView) {
//                 response = await login(apiPayload); // Calls mock login from AuthContext or api.js
//             } else { 
//                 response = await signup(apiPayload); // Calls mock signup
//                 setGlobalLLM(localSelectedLLM); 
                
//                 if (localSelectedLLM === 'gemini' && geminiApiKey.trim()) {
//                     await api.updateUserLLMConfig({ llmProvider: 'gemini', apiKey: geminiApiKey.trim() }); // Mocked
//                     toast.success('Gemini API key preference noted (mocked).');
//                 }
//                 if (localSelectedLLM === 'ollama' && ollamaApiUrl.trim()) {
//                      await api.updateUserLLMConfig({ llmProvider: 'ollama', ollamaUrl: ollamaApiUrl.trim() }); // Mocked
//                     toast.success('Ollama URL preference noted (mocked).');
//                 }
//             }
//             toast.dismiss(toastId);
//             toast.success(isLoginView ? 'Mock Login Successful!' : 'Mock Signup Successful!');
//             onClose(response); 
//         } catch (err) {
//             toast.dismiss(toastId);
//             const errorMessage = err.message || `Failed: ${isLoginView ? 'login' : 'signup'} (mock error)`;
//             setError(errorMessage);
//             toast.error(errorMessage);
//         } finally {
//             setLoading(false);
//         }
//     };

//     const handleDevLogin = () => {
//         if (devLogin) { // devLogin comes from AuthContext
//             const devData = devLogin(); 
//             if (devData) {
//                 toast.success("Dev Quick Login Successful!");
//                 onClose(devData);
//             }
//         } else {
//             toast.error("Dev login not available.");
//         }
//     };

//     if (!isOpen && !isTestingMode) return null; // If not testing mode and not open, render nothing
//     if (isTestingMode && !isOpen && token && user) return null; // If testing mode, already "logged in" and modal not forced open

//     // Define input classes here for consistency
//     const inputWrapperClass = "relative";
//     const inputIconClass = "absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-text-muted-light dark:text-text-muted-dark pointer-events-none";
//     const inputFieldClass = "input-field pl-10 py-2.5 text-sm"; // Uses .input-field from index.css

//     return (
//         // No AnimatePresence here, App.jsx handles it for the modal
//         <motion.div
//             key="auth-modal-content" // For AnimatePresence in App.jsx
//             initial={{ opacity: 0, scale: 0.95, y: -20 }}
//             animate={{ opacity: 1, scale: 1, y: 0 }}
//             exit={{ opacity: 0, scale: 0.95, y: 10 }}
//             transition={{ type: "spring", stiffness: 400, damping: 25 }}
//             className="card-base p-6 sm:p-8 w-full max-w-md glass-effect" // Added glass-effect
//             // Removed backdrop div, assuming Modal component in App.jsx handles it
//         >
//             <div className="flex justify-between items-center mb-6">
//                 <h2 className="text-xl sm:text-2xl font-bold text-text-light dark:text-text-dark">
//                     {isLoginView ? 'Welcome Back' : 'Create Your Account'}
//                 </h2>
//                 <IconButton 
//                     icon={X} 
//                     onClick={() => onClose(null)} // Pass null to indicate manual close
//                     variant="ghost" 
//                     size="sm" 
//                     title="Close" 
//                     className="text-text-muted-light dark:text-text-muted-dark hover:text-red-500 dark:hover:text-red-400"
//                 />
//             </div>

//             {error && <div className="mb-4 p-3 bg-red-500/10 border border-red-500/30 text-red-600 dark:text-red-300 rounded-md text-sm animate-fadeIn">{error}</div>}

//             <form onSubmit={handleSubmit} className="space-y-5">
//                 <div className={inputWrapperClass}>
//                     <UserIcon className={inputIconClass} />
//                     <input type="text" id="username" className={inputFieldClass} placeholder="Username" value={username} onChange={(e) => setUsername(e.target.value)} required disabled={loading}/>
//                 </div>
//                 <div className={inputWrapperClass}>
//                     <KeyRound className={inputIconClass} />
//                     <input type="password" id="password" className={inputFieldClass} placeholder="Password (min. 6 characters)" value={password} onChange={(e) => setPassword(e.target.value)} required minLength="6" disabled={loading}/>
//                 </div>

//                 {!isLoginView && (
//                     <div className="space-y-4 pt-2 animate-fadeIn">
//                         <LLMSelection selectedLLM={localSelectedLLM} onLlmChange={handleLlmChange} />
//                         {localSelectedLLM === 'gemini' && (
//                             <div className="mt-3 space-y-1">
//                                 <label htmlFor="geminiApiKeyModal" className="block text-xs font-medium text-text-muted-light dark:text-text-muted-dark">Gemini API Key (Optional)</label>
//                                 <div className={inputWrapperClass}>
//                                     <KeyRound className={inputIconClass} />
//                                     <input type="password" id="geminiApiKeyModal" className={inputFieldClass} placeholder="Enter your Gemini API Key" value={geminiApiKey} onChange={(e) => setGeminiApiKey(e.target.value)} disabled={loading}/>
//                                 </div>
//                             </div>
//                         )}
//                         {localSelectedLLM === 'ollama' && (
//                             <div className="mt-3 space-y-1">
//                                 <label htmlFor="ollamaApiUrlModal" className="block text-xs font-medium text-text-muted-light dark:text-text-muted-dark">Ollama API URL (Optional)</label>
//                                  <div className={inputWrapperClass}>
//                                     <Link2 className={inputIconClass} />
//                                     <input type="text" id="ollamaApiUrlModal" className={inputFieldClass} placeholder="Default: http://localhost:11434" value={ollamaApiUrl} onChange={(e) => setOllamaApiUrl(e.target.value)} disabled={loading}/>
//                                 </div>
//                             </div>
//                         )}
//                     </div>
//                 )}

//                 <Button type="submit" fullWidth isLoading={loading} leftIcon={isLoginView ? <LogIn size={18}/> : <UserPlus size={18}/>} className="py-2.5 !text-base"> {/* Made button text larger */}
//                     {isLoginView ? 'Login' : 'Sign Up'}
//                 </Button>
//             </form>

//             <p className="mt-6 text-center text-sm">
//                 <button 
//                     onClick={() => { setIsLoginView(!isLoginView); setError(''); }}
//                     className="font-medium text-primary hover:text-primary-dark dark:text-primary-light dark:hover:text-primary-darker transition-colors"
//                     disabled={loading}
//                 >
//                     {isLoginView ? "Don't have an account? Sign Up" : "Already have an account? Login"}
//                 </button>
//             </p>

//             {/* DEV_MODE_ALLOW_DEV_LOGIN is from AuthContext */}
//             {DEV_MODE_ALLOW_DEV_LOGIN && ( 
//                 <div className="mt-4 pt-4 border-t border-border-light dark:border-border-dark">
//                     <Button
//                         type="button" onClick={handleDevLogin} fullWidth 
//                         className="bg-yellow-500 hover:bg-yellow-600 dark:bg-yellow-600 dark:hover:bg-yellow-700 !text-white dark:!text-gray-900 font-semibold py-2.5 !text-base" // Overriding some default Button styles
//                         leftIcon={<Terminal size={18} />}
//                     >
//                         Dev Quick Login
//                     </Button>
//                 </div>
//             )}
//         </motion.div>
//     );
// }
// export default AuthModal;







// frontend/src/components/auth/AuthModal.jsx
import React, { useState, useEffect } from 'react';
import { useAuth } from '../../hooks/useAuth.jsx';
import { useAppState } from '../../contexts/AppStateContext.jsx';
import LLMSelection from './LLMSelection.jsx';
import api from '../../services/api.js'; 
import toast from 'react-hot-toast';
import { LogIn, UserPlus, X, Terminal, KeyRound, Link2, User as UserIcon, AlertCircle } from 'lucide-react';
import Button from '../core/Button.jsx';
import IconButton from '../core/IconButton.jsx'; // <<--- ***** ADD THIS IMPORT *****
import { motion } from 'framer-motion';

function AuthModal({ isOpen, onClose }) {
    const { 
        login, signup, devLogin, 
        DEV_MODE_ALLOW_DEV_LOGIN, // Flag from AuthContext
        MOCK_DEV_USERNAME, MOCK_DEV_PASSWORD // Default credentials from AuthContext
    } = useAuth(); 
    const { selectedLLM: globalSelectedLLM, switchLLM: setGlobalLLM } = useAppState();
    
    const [isLoginView, setIsLoginView] = useState(true);
    // Pre-fill if dev mode allows and credentials are provided by AuthContext
    const [username, setUsername] = useState(DEV_MODE_ALLOW_DEV_LOGIN ? (MOCK_DEV_USERNAME || '') : '');
    const [password, setPassword] = useState(DEV_MODE_ALLOW_DEV_LOGIN ? (MOCK_DEV_PASSWORD || '') : '');
    const [localSelectedLLM, setLocalSelectedLLM] = useState(globalSelectedLLM || 'ollama');
    const [geminiApiKey, setGeminiApiKey] = useState('');
    const [ollamaApiUrl, setOllamaApiUrl] = useState('');
    
    const [error, setError] = useState('');
    const [loading, setLoading] = useState(false);
    const [devLoginLoading, setDevLoginLoading] = useState(false); 

    useEffect(() => {
        if (isOpen) {
            setError(''); 
            if (isLoginView && DEV_MODE_ALLOW_DEV_LOGIN) {
                setUsername(MOCK_DEV_USERNAME || '');
                setPassword(MOCK_DEV_PASSWORD || '');
            } else if (!isLoginView) { 
                setUsername('');
                setPassword('');
            }
            setLocalSelectedLLM(globalSelectedLLM || 'ollama');
            setGeminiApiKey('');
            setOllamaApiUrl('');
        }
    }, [isOpen, isLoginView, DEV_MODE_ALLOW_DEV_LOGIN, MOCK_DEV_USERNAME, MOCK_DEV_PASSWORD, globalSelectedLLM]);

    const handleLlmChange = (llm) => setLocalSelectedLLM(llm);

    const handleSubmit = async (e) => {
        e.preventDefault();
        if (!username.trim() || !password.trim()) {
            setError("Username and password are required.");
            toast.error("Username and password are required.");
            return;
        }
        setError(''); setLoading(true);
        const toastId = toast.loading(isLoginView ? 'Logging in...' : 'Signing up...');
        try {
            let response;
            const apiPayload = { username, password };
            if (isLoginView) {
                response = await login(apiPayload);
            } else { 
                response = await signup(apiPayload);
                setGlobalLLM(localSelectedLLM);
                if (localSelectedLLM === 'gemini' && geminiApiKey.trim()) {
                    await api.updateUserLLMConfig({ llmProvider: 'gemini', apiKey: geminiApiKey.trim() });
                    toast.success('Gemini API key preference noted (mocked).');
                }
                if (localSelectedLLM === 'ollama' && ollamaApiUrl.trim()) {
                     await api.updateUserLLMConfig({ llmProvider: 'ollama', ollamaUrl: ollamaApiUrl.trim() });
                    toast.success('Ollama URL preference noted (mocked).');
                }
            }
            toast.dismiss(toastId);
            toast.success(isLoginView ? 'Login Successful!' : 'Signup Successful!');
            onClose(response); 
        } catch (err) {
            toast.dismiss(toastId);
            const errorMessage = err.response?.data?.message || err.message || `Failed: ${isLoginView ? 'login' : 'signup'}`;
            setError(errorMessage);
            toast.error(errorMessage);
        } finally { setLoading(false); }
    };

    const handleDevLogin = async () => {
        if (devLogin) {
            setDevLoginLoading(true); setError('');
            const toastId = toast.loading("Attempting Dev Quick Login...");
            try {
                const devData = await devLogin(); 
                if (devData && devData.token) {
                    toast.dismiss(toastId);
                    toast.success("Dev Quick Login Successful!");
                    onClose(devData);
                } else {
                    throw new Error("Dev login conditions not met or mock API failed.");
                }
            } catch(err) {
                toast.dismiss(toastId);
                const errorMessage = err.message || "Dev Quick Login encountered an error.";
                setError(errorMessage);
                toast.error(errorMessage);
            } finally {
                setDevLoginLoading(false);
            }
        } else {
            toast.error("Dev login feature not available in current AuthContext setup.");
        }
    };

    if (!isOpen) return null;

    const inputWrapperClass = "relative";
    const inputIconClass = "absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-text-muted-light dark:text-text-muted-dark pointer-events-none";
    const inputFieldStyledClass = "input-field pl-10 py-2.5 text-sm";

    return (
        <div className="fixed inset-0 bg-black/70 backdrop-blur-sm flex items-center justify-center z-50 p-4 animate-fadeIn">
            <motion.div 
                key="auth-modal-content"
                initial={{ opacity: 0, scale: 0.95, y: -10 }}
                animate={{ opacity: 1, scale: 1, y: 0 }}
                exit={{ opacity: 0, scale: 0.95, y: 10 }}
                transition={{ type: "spring", stiffness: 400, damping: 25 }}
                className="card-base p-6 sm:p-8 w-full max-w-md glass-effect"
            >
                <div className="flex justify-between items-center mb-6">
                    <h2 className="text-xl sm:text-2xl font-bold text-text-light dark:text-text-dark">
                        {isLoginView ? 'Welcome Back' : 'Create Your Account'}
                    </h2>
                    {/* This is where IconButton is used */}
                    <IconButton 
                        icon={X} 
                        onClick={() => onClose(null)} 
                        variant="ghost" 
                        size="sm" 
                        title="Close" 
                        className="text-text-muted-light dark:text-text-muted-dark hover:text-red-500 dark:hover:text-red-400"
                    />
                </div>

                {error && <div className="mb-4 p-3 bg-red-500/10 border border-red-500/30 text-red-600 dark:text-red-300 rounded-md text-sm animate-fadeIn flex items-center gap-2"><AlertCircle size={16}/>{error}</div>}

                <form onSubmit={handleSubmit} className="space-y-5">
                    <div className={inputWrapperClass}>
                        <UserIcon className={inputIconClass} />
                        <input type="text" id="username" className={inputFieldStyledClass} placeholder="Username" value={username} onChange={(e) => setUsername(e.target.value)} required disabled={loading || devLoginLoading}/>
                    </div>
                    <div className={inputWrapperClass}>
                        <KeyRound className={inputIconClass} />
                        <input type="password" id="password" className={inputFieldStyledClass} placeholder="Password (min. 6 characters)" value={password} onChange={(e) => setPassword(e.target.value)} required minLength="6" disabled={loading || devLoginLoading}/>
                    </div>

                    {!isLoginView && (
                        <div className="space-y-4 pt-2 animate-fadeIn">
                            <LLMSelection selectedLLM={localSelectedLLM} onLlmChange={handleLlmChange} disabled={loading || devLoginLoading}/>
                            {localSelectedLLM === 'gemini' && (
                                <div className="mt-3 space-y-1">
                                    <label htmlFor="geminiApiKeyModal" className="block text-xs font-medium text-text-muted-light dark:text-text-muted-dark">Gemini API Key (Optional)</label>
                                    <div className={inputWrapperClass}>
                                        <KeyRound className={inputIconClass} />
                                        <input type="password" id="geminiApiKeyModal" className={inputFieldStyledClass} placeholder="Enter your Gemini API Key" value={geminiApiKey} onChange={(e) => setGeminiApiKey(e.target.value)} disabled={loading || devLoginLoading}/>
                                    </div>
                                </div>
                            )}
                            {localSelectedLLM === 'ollama' && (
                                <div className="mt-3 space-y-1">
                                    <label htmlFor="ollamaApiUrlModal" className="block text-xs font-medium text-text-muted-light dark:text-text-muted-dark">Ollama API URL (Optional)</label>
                                     <div className={inputWrapperClass}>
                                        <Link2 className={inputIconClass} />
                                        <input type="text" id="ollamaApiUrlModal" className={inputFieldStyledClass} placeholder="Default: http://localhost:11434" value={ollamaApiUrl} onChange={(e) => setOllamaApiUrl(e.target.value)} disabled={loading || devLoginLoading}/>
                                    </div>
                                </div>
                            )}
                        </div>
                    )}

                    <Button type="submit" fullWidth isLoading={loading} disabled={devLoginLoading} leftIcon={isLoginView ? <LogIn size={18}/> : <UserPlus size={18}/>} className="py-2.5 !text-base">
                        {isLoginView ? 'Login' : 'Sign Up'}
                    </Button>
                </form>

                <p className="mt-6 text-center text-sm">
                    <button 
                        onClick={() => { setIsLoginView(!isLoginView); setError(''); }}
                        className="font-medium text-primary hover:text-primary-dark dark:text-primary-light dark:hover:text-primary-darker transition-colors"
                        disabled={loading || devLoginLoading}
                    >
                        {isLoginView ? "Don't have an account? Sign Up" : "Already have an account? Login"}
                    </button>
                </p>

                {DEV_MODE_ALLOW_DEV_LOGIN && (
                    <div className="mt-4 pt-4 border-t border-border-light dark:border-border-dark">
                        <Button
                            type="button" onClick={handleDevLogin} fullWidth 
                            className="bg-yellow-500 hover:bg-yellow-600 dark:bg-yellow-600 dark:hover:bg-yellow-700 !text-white dark:!text-gray-900 font-semibold py-2.5 !text-base"
                            leftIcon={<Terminal size={18} />}
                            isLoading={devLoginLoading} 
                            disabled={loading} 
                        >
                            Dev Quick Login
                        </Button>
                    </div>
                )}
            </motion.div>
        </div>
    );
}
export default AuthModal;
```

`src/components/auth/LLMSelection.jsx`

```javascript
// frontend/src/components/auth/LLMSelection.jsx
import React from 'react';
import { HardDrive, Cloud } from 'lucide-react';

function LLMSelection({ selectedLLM, onLlmChange, disabled = false }) {
    const llms = [
        { id: 'ollama', name: 'Ollama LLM', description: 'Local & Private. Requires Ollama running.', Icon: HardDrive },
        { id: 'gemini', name: 'Gemini LLM', description: 'Cloud-based by Google. API Key may be required.', Icon: Cloud },
    ];

    return (
        <div>
            <label className="block text-sm font-medium text-text-light dark:text-text-dark mb-2">
                Choose Your LLM Provider
            </label>
            <div className="grid grid-cols-1 sm:grid-cols-2 gap-3">
                {llms.map((llm) => {
                    const isSelected = selectedLLM === llm.id;
                    return (
                        <button
                            key={llm.id}
                            type="button"
                            onClick={() => onLlmChange(llm.id)}
                            disabled={disabled}
                            className={`p-4 border rounded-lg text-left transition-all duration-150 focus:outline-none group focus:ring-2 focus:ring-offset-2 dark:focus:ring-offset-surface-dark focus:ring-primary
                                ${isSelected 
                                    ? 'bg-primary dark:bg-primary border-primary dark:border-primary-dark ring-2 ring-primary dark:ring-primary-dark shadow-lg' 
                                    : 'bg-surface-light dark:bg-surface-dark border-border-light dark:border-border-dark hover:border-primary-light dark:hover:border-primary-dark hover:shadow-md'
                                }
                                ${disabled ? 'opacity-70 cursor-not-allowed' : ''}
                            `}
                        >
                            <div className="flex items-center mb-1">
                                <llm.Icon size={20} className={`mr-2 transition-colors 
                                    ${isSelected 
                                        ? 'text-white dark:text-blue-100' // High contrast for selected
                                        : 'text-text-muted-light dark:text-text-muted-dark group-hover:text-primary dark:group-hover:text-primary-light'}`} />
                                <span className={`font-semibold transition-colors 
                                    ${isSelected 
                                        ? 'text-white dark:text-white' // High contrast for selected
                                        : 'text-text-light dark:text-text-dark group-hover:text-primary dark:group-hover:text-primary-light'}`}>
                                    {llm.name}
                                </span>
                            </div>
                            <p className={`text-xs transition-colors 
                                ${isSelected 
                                    ? 'text-blue-100 dark:text-blue-200' // High contrast for selected
                                    : 'text-text-muted-light dark:text-text-muted-dark'}`}>
                                {llm.description}
                            </p>
                        </button>
                    );
                })}
            </div>
        </div>
    );
}

export default LLMSelection;
```

`src/components/chat/ChatHistory.jsx`

```javascript
import React, { useRef, useEffect } from 'react';
import MessageBubble from './MessageBubble';
import { motion, AnimatePresence } from 'framer-motion';

function ChatHistory({ messages, isLoading }) {
    const chatHistoryRef = useRef(null);

    useEffect(() => {
        if (chatHistoryRef.current) {
            chatHistoryRef.current.scrollTop = chatHistoryRef.current.scrollHeight;
        }
    }, [messages]);

    return (
        <div ref={chatHistoryRef} className="flex-1 overflow-y-auto p-4 space-y-4">
            <AnimatePresence initial={false}>
                {messages.map((msg, index) => (
                    <motion.div
                        key={msg.id || index} // Critical for AnimatePresence
                        layout
                        initial={{ opacity: 0, y: 20 }}
                        animate={{ opacity: 1, y: 0 }}
                        exit={{ opacity: 0, y: -10 }}
                        transition={{ duration: 0.3, ease: "easeOut" }}
                    >
                        <MessageBubble
                            sender={msg.sender}
                            text={msg.text}
                            thinking={msg.thinking}
                            references={msg.references}
                            timestamp={msg.timestamp}
                            sourcePipeline={msg.source_pipeline}
                        />
                    </motion.div>
                ))}
            </AnimatePresence>
            {isLoading && messages.length > 0 && ( // Show typing indicator only if there are prior messages
                 <motion.div 
                    layout
                    initial={{ opacity: 0, y: 10 }}
                    animate={{ opacity: 1, y: 0 }}
                    className="flex justify-start pl-2 mt-2"
                 >
                    <div className="message-bubble bot-message bg-surface-light dark:bg-surface-dark p-2 inline-flex items-center gap-1">
                        <span className="animate-pulse text-text-muted-light dark:text-text-muted-dark text-xs">●</span>
                        <span className="animate-pulse delay-100 text-text-muted-light dark:text-text-muted-dark text-xs">●</span>
                        <span className="animate-pulse delay-200 text-text-muted-light dark:text-text-muted-dark text-xs">●</span>
                    </div>
                </motion.div>
            )}
        </div>
    );
}
export default ChatHistory;

```

`src/components/chat/ChatHistoryModal.jsx`

```javascript
import React, { useState, useEffect, useCallback } from 'react';
import api from '../../services/api';
import toast from 'react-hot-toast';
import { X, MessageSquareText, Loader2, AlertTriangle } from 'lucide-react';
import Modal from '../core/Modal.jsx'; // Assuming your generic Modal component

const formatDate = (dateString) => {
    if (!dateString) return 'N/A';
    try {
        return new Date(dateString).toLocaleString(undefined, { 
            month: 'short', day: 'numeric', year: 'numeric', hour: '2-digit', minute: '2-digit' 
        });
    } catch (e) {
        return 'Invalid Date';
    }
};

function ChatHistoryModal({ isOpen, onClose, onSelectSession }) {
    const [sessions, setSessions] = useState([]);
    const [selectedSessionId, setSelectedSessionId] = useState(null);
    const [sessionMessages, setSessionMessages] = useState([]);
    const [loadingSessions, setLoadingSessions] = useState(false);
    const [loadingMessages, setLoadingMessages] = useState(false);
    const [error, setError] = useState('');

    const fetchSessions = useCallback(async () => {
        if (!isOpen) return; 
        setLoadingSessions(true);
        setError('');
        try {
            const data = await api.getChatSessions(); 
            setSessions(Array.isArray(data) ? data : []);
        } catch (err) {
            toast.error("Failed to load chat sessions.");
            setError(err.message || "Could not fetch sessions.");
        } finally {
            setLoadingSessions(false);
        }
    }, [isOpen]);

    useEffect(() => {
        if (isOpen) { // Only fetch when modal becomes open
            fetchSessions();
            setSelectedSessionId(null); // Reset selection when modal reopens
            setSessionMessages([]);
        }
    }, [isOpen, fetchSessions]); 

    const handleSessionSelect = async (sessionId) => {
        if (selectedSessionId === sessionId) return; // Avoid re-fetching if already selected

        setSelectedSessionId(sessionId);
        setLoadingMessages(true);
        setSessionMessages([]);
        setError(''); 
        try {
            const historyData = await api.getChatHistory(sessionId);
            setSessionMessages((Array.isArray(historyData) ? historyData : []).map(msg => ({
                id: msg.id || msg._id || String(Math.random() + Date.now()),
                sender: msg.role === 'model' ? 'bot' : 'user',
                text: msg.parts && msg.parts.length > 0 ? msg.parts[0].text : (msg.text || ''),
                timestamp: msg.timestamp
            })));
        } catch (err) {
            toast.error("Failed to load messages for this session.");
            setError(`Error loading messages: ${err.message}`);
        } finally {
            setLoadingMessages(false);
        }
    };

    const handleLoadSessionAndClose = () => {
        if (selectedSessionId) {
            onSelectSession(selectedSessionId); 
            onClose();
        } else {
            toast.error("Please select a session to load.");
        }
    };
    
    // Placeholder for delete functionality
    // const handleDeleteSession = async (sessionIdToDelete, e) => { ... };

    return (
        <Modal isOpen={isOpen} onClose={onClose} title="Chat History" size="2xl">
            <div className="flex flex-col md:flex-row gap-4 max-h-[70vh] h-[70vh]">
                {/* Sessions List */}
                <div className="w-full md:w-1/3 border-r border-border-light dark:border-border-dark pr-0 md:pr-2 overflow-y-auto custom-scrollbar">
                    <h3 className="text-sm font-semibold mb-2 text-text-light dark:text-text-dark px-1">Sessions</h3>
                    {loadingSessions && <div className="flex justify-center p-4"><Loader2 className="animate-spin text-primary" size={24}/></div>}
                    {!loadingSessions && error && !sessions.length && <div className="text-red-500 text-xs p-2">{error}</div>}
                    {!loadingSessions && !error && sessions.length === 0 && <p className="text-xs text-text-muted-light dark:text-text-muted-dark p-2">No past sessions found.</p>}
                    
                    <ul className="space-y-1">
                        {sessions.map(session => (
                            <li key={session.sessionId}
                                onClick={() => handleSessionSelect(session.sessionId)}
                                className={`p-2.5 rounded-md cursor-pointer text-xs transition-colors group relative
                                            ${selectedSessionId === session.sessionId 
                                                ? 'bg-primary text-white dark:bg-primary-dark' 
                                                : 'bg-surface-light dark:bg-gray-800 hover:bg-gray-100 dark:hover:bg-gray-700'}`}
                            >
                                <div className="font-medium truncate" title={session.preview}>{session.preview || `Session ${session.sessionId.substring(0,8)}`}</div>
                                <div className={`text-[0.7rem] ${selectedSessionId === session.sessionId ? 'text-blue-100 dark:text-blue-200' : 'text-text-muted-light dark:text-text-muted-dark'}`}>
                                    {formatDate(session.updatedAt)} - {session.messageCount} msgs
                                </div>
                                {/* Delete button placeholder
                                <button 
                                    className="absolute top-1 right-1 p-1 text-red-400 hover:text-red-600 opacity-0 group-hover:opacity-100 transition-opacity"
                                    onClick={(e) => handleDeleteSession(session.sessionId, e)}
                                    title="Delete session"
                                >
                                    <Trash2 size={14} />
                                </button>
                                */}
                            </li>
                        ))}
                    </ul>
                </div>

                {/* Session Details */}
                <div className="w-full md:w-2/3 flex flex-col overflow-hidden mt-4 md:mt-0">
                    <h3 className="text-sm font-semibold mb-2 text-text-light dark:text-text-dark">Session Details</h3>
                    <div className="flex-grow bg-gray-50 dark:bg-gray-800 p-3 rounded-md overflow-y-auto custom-scrollbar border border-border-light dark:border-border-dark">
                        {loadingMessages && <div className="flex justify-center p-4"><Loader2 className="animate-spin text-primary" size={24} /></div>}
                        {!selectedSessionId && !loadingMessages && (
                            <div className="flex flex-col items-center justify-center h-full text-text-muted-light dark:text-text-muted-dark text-sm">
                                <MessageSquareText size={40} className="mb-3 opacity-50" />
                                <p>Select a session from the left to view its messages.</p>
                            </div>
                        )}
                        {selectedSessionId && !loadingMessages && sessionMessages.length === 0 && 
                            <p className="text-center text-sm text-text-muted-light dark:text-text-muted-dark p-4">No messages in this session.</p>
                        }
                        <div className="space-y-3">
                            {sessionMessages.map(msg => (
                                <div key={msg.id} 
                                     className={`p-2.5 rounded-lg shadow-sm w-fit max-w-[90%] text-xs
                                                ${msg.sender === 'user' 
                                                    ? 'bg-blue-500 text-white ml-auto' 
                                                    : 'bg-gray-200 text-gray-800 dark:bg-gray-700 dark:text-gray-100'}`}>
                                    <p className="font-semibold text-[0.7rem] mb-0.5">{msg.sender === 'user' ? 'You' : 'AI Tutor'}</p>
                                    <p className="whitespace-pre-wrap break-words">{msg.text}</p>
                                    <p className="text-[0.65rem] opacity-70 mt-1 text-right">{formatDate(msg.timestamp)}</p>
                                </div>
                            ))}
                        </div>
                    </div>
                </div>
            </div>
            <div className="mt-6 pt-4 border-t border-border-light dark:border-border-dark flex justify-end gap-3">
                <button 
                    onClick={onClose} 
                    className="px-4 py-2 text-xs font-medium rounded-md bg-gray-200 dark:bg-gray-600 hover:bg-gray-300 dark:hover:bg-gray-500 text-text-light dark:text-text-dark transition-colors"
                >
                    Close
                </button>
                <button 
                    onClick={handleLoadSessionAndClose} 
                    className="px-4 py-2 text-xs font-medium rounded-md btn-primary disabled:opacity-50"
                    disabled={!selectedSessionId || loadingMessages || loadingSessions}
                >
                    Load Selected Session
                </button>
            </div>
        </Modal>
    );
}
export default ChatHistoryModal;
```

`src/components/chat/ChatInput.jsx`

```javascript
import React, { useState, useEffect, useRef } from 'react';
import { Send, Mic, PlusCircle, Loader2, SearchCheck, SearchSlash } from 'lucide-react'; // SearchCheck for RAG on, SearchSlash for RAG off
import { useWebSpeech } from '../../hooks/useWebSpeech'; // You'll need to create this hook

function ChatInput({ onSendMessage, isLoading, currentStatus, useRag, setUseRag }) {
    const [inputValue, setInputValue] = useState('');
    const { transcript, listening, isSpeechSupported, startListening, stopListening, resetTranscript } = useWebSpeech();
    const textareaRef = useRef(null);

    useEffect(() => {
        if (transcript) {
            setInputValue(prev => prev + (prev ? " " : "") + transcript);
            resetTranscript(); // Clear transcript after appending
        }
    }, [transcript, resetTranscript]);
    
    // Auto-resize textarea
    useEffect(() => {
        if (textareaRef.current) {
            textareaRef.current.style.height = 'auto'; // Reset height
            textareaRef.current.style.height = `${textareaRef.current.scrollHeight}px`; // Set to scroll height
        }
    }, [inputValue]);


    const handleSubmit = (e) => {
        e.preventDefault();
        if (inputValue.trim() && !isLoading) {
            onSendMessage(inputValue);
            setInputValue('');
        }
    };

    const toggleVoiceInput = () => {
        if (listening) {
            stopListening();
        } else {
            startListening();
        }
    };

    return (
        <div className="p-2 sm:p-4 border-t border-gray-200 dark:border-gray-700 bg-surface-light dark:bg-surface-dark">
            {/* Status Bar */}
            <div className="text-xs text-text-muted-light dark:text-text-muted-dark mb-1.5 h-4 transition-opacity duration-300">
                {isLoading ? (
                    <span className="flex items-center gap-1 animate-pulse">
                        <Loader2 size={12} className="animate-spin" /> {currentStatus || "Processing..."}
                    </span>
                ) : (
                    currentStatus || "Ready"
                )}
            </div>

            <form onSubmit={handleSubmit} className="flex items-end gap-2">
                {/* Attachment/Plus Button - Placeholder */}
                <button
                    type="button"
                    title="Attach file (Coming Soon)"
                    onClick={() => alert("Attachment feature coming soon!")}
                    className="p-2.5 rounded-lg text-text-muted-light dark:text-text-muted-dark hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors focus:outline-none focus:ring-2 focus:ring-primary"
                >
                    <PlusCircle size={22} />
                </button>

                <textarea
                    ref={textareaRef}
                    value={inputValue}
                    onChange={(e) => setInputValue(e.target.value)}
                    onKeyDown={(e) => {
                        if (e.key === 'Enter' && !e.shiftKey && !isLoading) {
                            handleSubmit(e);
                        }
                    }}
                    placeholder="DeepResearch... Type your message or ask a question"
                    className="flex-1 p-2.5 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-text-light dark:text-text-dark focus:ring-2 focus:ring-primary focus:border-transparent outline-none resize-none min-h-[44px] max-h-32 custom-scrollbar text-sm"
                    rows="1"
                    disabled={isLoading}
                />

                {isSpeechSupported && (
                    <button
                        type="button"
                        onClick={toggleVoiceInput}
                        title={listening ? "Stop listening" : "Start voice input"}
                        className={`p-2.5 rounded-lg transition-colors focus:outline-none focus:ring-2 focus:ring-primary ${
                            listening 
                            ? 'bg-red-500 text-white animate-pulse' 
                            : 'text-text-muted-light dark:text-text-muted-dark hover:bg-gray-200 dark:hover:bg-gray-600'
                        }`}
                    >
                        <Mic size={20} />
                    </button>
                )}
                
                {/* RAG Toggle Button */}
                <button
                    type="button"
                    onClick={() => setUseRag(!useRag)}
                    title={useRag ? "Disable RAG (Chat with LLM directly)" : "Enable RAG (Use your documents)"}
                    className={`p-2.5 rounded-lg transition-colors focus:outline-none focus:ring-2 focus:ring-primary ${
                        useRag 
                        ? 'bg-green-500 text-white' 
                        : 'text-text-muted-light dark:text-text-muted-dark hover:bg-gray-200 dark:hover:bg-gray-600'
                    }`}
                    disabled={isLoading}
                >
                    {useRag ? <SearchCheck size={20} /> : <SearchSlash size={20} />}
                </button>

                <button
                    type="submit"
                    className="p-2.5 bg-primary text-white rounded-lg hover:bg-primary-dark transition-colors focus:outline-none focus:ring-2 focus:ring-primary focus:ring-opacity-75 disabled:opacity-50"
                    disabled={isLoading || !inputValue.trim()}
                >
                    <Send size={20} />
                </button>
            </form>
        </div>
    );
}
export default ChatInput;
```

`src/components/chat/MessageBubble.jsx`

```javascript
import React from 'react';
import { marked } from 'marked'; // Ensure marked is installed
import { ChevronDown, Brain, Link as LinkIcon, Zap, Server } from 'lucide-react'; // Zap for Ollama, Server for Gemini (example)

// Configure marked for consistent rendering
// WARNING: sanitize: false can be a security risk if LLM output is not trusted.
// For production, use DOMPurify:
// import DOMPurify from 'dompurify';
// const cleanHtml = DOMPurify.sanitize(rawHtml);
marked.setOptions({
  breaks: true,
  gfm: true,
  // sanitize: false, // Set to true or use DOMPurify for production if LLM output is untrusted
});

const createMarkup = (markdownText) => {
    if (!markdownText) return { __html: '' };
    const rawHtml = marked.parse(markdownText);
    // const cleanHtml = DOMPurify.sanitize(rawHtml); // For production
    return { __html: rawHtml }; // For dev, or if LLM output is trusted
};

const escapeHtml = (unsafe) => {
    if (typeof unsafe !== 'string') return '';
    return unsafe
         .replace(/&/g, "&")
         .replace(/</g, "<")
         .replace(/>/g, ">")
         .replace(/"/g, '"')
         .replace(/'/g, "'");
};


function MessageBubble({ sender, text, thinking, references, timestamp, sourcePipeline }) {
    const isUser = sender === 'user';

    const formatTimestamp = (ts) => {
        if (!ts) return '';
        try {
            return new Date(ts).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
        } catch (e) { return ''; }
    };

    const getPipelineIcon = () => {
        if (!sourcePipeline) return null;
        if (sourcePipeline.includes('ollama')) return <Zap size={12} className="text-green-400" title="Ollama" />;
        if (sourcePipeline.includes('gemini')) return <Server size={12} className="text-blue-400" title="Gemini" />;
        return null;
    };

    return (
        <div className={`flex flex-col ${isUser ? 'items-end' : 'items-start'} w-full`}>
            <div 
                className={`message-bubble max-w-[85%] md:max-w-[75%] p-3 rounded-2xl shadow-md ${
                    isUser 
                    ? 'bg-primary dark:bg-primary-dark text-white rounded-br-lg' 
                    : 'bg-surface-light dark:bg-surface-dark text-text-light dark:text-text-dark rounded-bl-lg border border-gray-200 dark:border-gray-700'
                }`}
            >
                <div className="prose prose-sm dark:prose-invert max-w-none message-content" dangerouslySetInnerHTML={createMarkup(text || '')} />
                
                <div className="flex items-center justify-end mt-1.5 text-xs opacity-70">
                    {!isUser && getPipelineIcon() && <span className="mr-1.5">{getPipelineIcon()}</span>}
                    {formatTimestamp(timestamp)}
                </div>
            </div>

            {!isUser && (thinking || (references && references.length > 0)) && (
                <div className="message-metadata-container max-w-[85%] md:max-w-[75%] mt-1.5 pl-2">
                    {thinking && (
                        <details className="group text-xs mb-1">
                            <summary className="flex items-center gap-1 cursor-pointer text-text-muted-light dark:text-text-muted-dark hover:text-primary dark:hover:text-primary-light transition-colors">
                                <Brain size={14} /> Reasoning
                                <ChevronDown size={14} className="group-open:rotate-180 transition-transform" />
                            </summary>
                            <pre className="mt-1 p-2 bg-gray-100 dark:bg-gray-800 rounded-md text-text-light dark:text-text-dark whitespace-pre-wrap break-all text-[0.7rem] max-h-32 overflow-y-auto custom-scrollbar">
                                <code>{escapeHtml(thinking)}</code>
                            </pre>
                        </details>
                    )}
                    {references && references.length > 0 && (
                        <details className="group text-xs" open>
                            <summary className="flex items-center gap-1 cursor-pointer text-text-muted-light dark:text-text-muted-dark hover:text-primary dark:hover:text-primary-light transition-colors">
                                <LinkIcon size={14} /> References
                                <ChevronDown size={14} className="group-open:rotate-180 transition-transform" />
                            </summary>
                            <ul className="mt-1 pl-1 space-y-0.5 text-[0.7rem]">
                                {references.map((ref, index) => (
                                    <li 
                                        key={index} 
                                        className="text-text-muted-light dark:text-text-muted-dark hover:text-text-light dark:hover:text-text-dark transition-colors"
                                        title={`Preview: ${escapeHtml(ref.content_preview || '')}`}
                                    >
                                        <span className="font-semibold text-accent">[{ref.number}]</span> {escapeHtml(ref.source)}
                                    </li>
                                ))}
                            </ul>
                        </details>
                    )}
                </div>
            )}
        </div>
    );
}

export default MessageBubble;
```

`src/components/common/ThemeToggle.jsx`

```javascript
import React from 'react';
import { Sun, Moon } from 'lucide-react';
import { useTheme } from '../../hooks/useTheme';

function ThemeToggle() {
    const { theme, toggleTheme } = useTheme();

    return (
        <button
            onClick={toggleTheme}
            className="p-2 rounded-full text-text-muted-light dark:text-text-muted-dark hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors focus:outline-none focus:ring-2 focus:ring-primary"
            aria-label={theme === 'light' ? 'Switch to dark theme' : 'Switch to light theme'}
        >
            {theme === 'light' ? <Moon size={20} /> : <Sun size={20} />}
        </button>
    );
}

export default ThemeToggle;
```

`src/components/core/Button.jsx`

```javascript
import React from 'react';
import { Loader2 } from 'lucide-react'; // For loading spinner

const Button = ({
    children,
    onClick,
    type = 'button',
    variant = 'primary', // 'primary', 'secondary', 'danger', 'outline', 'ghost'
    size = 'md', // 'sm', 'md', 'lg'
    leftIcon,
    rightIcon,
    isLoading = false,
    disabled = false,
    fullWidth = false,
    className = '',
    ...props
}) => {
    const baseStyles = "font-semibold rounded-lg focus:outline-none focus:ring-2 focus:ring-opacity-75 transition-all duration-150 ease-in-out flex items-center justify-center gap-2";

    const variantStyles = {
        primary: "bg-primary hover:bg-primary-dark text-white focus:ring-primary",
        secondary: "bg-secondary hover:bg-secondary-dark text-white focus:ring-secondary",
        danger: "bg-red-500 hover:bg-red-600 text-white focus:ring-red-500",
        outline: "border border-primary text-primary hover:bg-primary-light dark:hover:bg-opacity-10 focus:ring-primary",
        ghost: "text-primary hover:bg-primary-light dark:hover:bg-opacity-10 focus:ring-primary",
    };

    const sizeStyles = {
        sm: "px-3 py-1.5 text-xs",
        md: "px-4 py-2 text-sm",
        lg: "px-6 py-3 text-base",
    };

    const widthStyle = fullWidth ? "w-full" : "";
    const disabledStyle = (disabled || isLoading) ? "opacity-60 cursor-not-allowed" : "cursor-pointer";

    return (
        <button
            type={type}
            onClick={onClick}
            disabled={disabled || isLoading}
            className={`${baseStyles} ${variantStyles[variant]} ${sizeStyles[size]} ${widthStyle} ${disabledStyle} ${className}`}
            {...props}
        >
            {isLoading && <Loader2 size={size === 'sm' ? 14 : 18} className="animate-spin" />}
            {!isLoading && leftIcon && <span className="icon-left">{leftIcon}</span>}
            {!isLoading && children}
            {!isLoading && rightIcon && <span className="icon-right">{rightIcon}</span>}
        </button>
    );
};

export default Button;
```

`src/components/core/IconButton.jsx`

```javascript
import React from 'react';
import { Loader2 } from 'lucide-react';

const IconButton = ({
    icon: Icon, // Pass the Lucide icon component directly
    onClick,
    variant = 'ghost', // 'ghost', 'outline', 'subtle'
    size = 'md', // 'sm', 'md', 'lg'
    isLoading = false,
    disabled = false,
    className = '',
    title, // For accessibility and tooltips
    ariaLabel,
    ...props
}) => {
    const baseStyles = "rounded-md focus:outline-none focus:ring-2 focus:ring-opacity-75 transition-colors duration-150 flex items-center justify-center";

    const variantStyles = {
        ghost: "text-text-muted-light dark:text-text-muted-dark hover:bg-gray-200 dark:hover:bg-gray-700 focus:ring-primary",
        outline: "border border-gray-300 dark:border-gray-600 text-text-muted-light dark:text-text-muted-dark hover:border-primary hover:text-primary focus:ring-primary",
        subtle: "bg-gray-100 dark:bg-gray-700 text-text-light dark:text-text-dark hover:bg-gray-200 dark:hover:bg-gray-600 focus:ring-primary",
        danger: "text-red-500 hover:bg-red-100 dark:hover:bg-red-900 focus:ring-red-500"
    };

    const sizeStyles = {
        sm: "p-1.5", // Icon size typically 14-16px
        md: "p-2",   // Icon size typically 18-20px
        lg: "p-2.5", // Icon size typically 22-24px
    };
    
    const iconSizeMap = {
        sm: 16,
        md: 20,
        lg: 24,
    };

    const disabledStyle = (disabled || isLoading) ? "opacity-50 cursor-not-allowed" : "cursor-pointer";

    return (
        <button
            type="button"
            onClick={onClick}
            disabled={disabled || isLoading}
            className={`${baseStyles} ${variantStyles[variant]} ${sizeStyles[size]} ${disabledStyle} ${className}`}
            title={title}
            aria-label={ariaLabel || title}
            {...props}
        >
            {isLoading ? (
                <Loader2 size={iconSizeMap[size]} className="animate-spin" />
            ) : (
                Icon && <Icon size={iconSizeMap[size]} />
            )}
        </button>
    );
};

export default IconButton;
```

`src/components/core/Modal.jsx`

```javascript
import React, { useEffect } from 'react';
import { X } from 'lucide-react';
import { motion, AnimatePresence } from 'framer-motion';

const Modal = ({
    isOpen,
    onClose,
    title,
    children,
    footerContent,
    size = 'md', // 'sm', 'md', 'lg', 'xl'
    closeOnOverlayClick = true,
}) => {
    useEffect(() => {
        const handleEscapeKey = (event) => {
            if (event.key === 'Escape' && isOpen) {
                onClose();
            }
        };
        document.addEventListener('keydown', handleEscapeKey);
        return () => {
            document.removeEventListener('keydown', handleEscapeKey);
        };
    }, [isOpen, onClose]);

    const sizeClasses = {
        sm: 'max-w-sm',
        md: 'max-w-md',
        lg: 'max-w-lg',
        xl: 'max-w-xl',
        '2xl': 'max-w-2xl'
    };

    const backdropVariants = {
        visible: { opacity: 1 },
        hidden: { opacity: 0 },
    };

    const modalVariants = {
        hidden: { y: "-50px", opacity: 0 },
        visible: { y: "0", opacity: 1 },
        exit: { y: "50px", opacity: 0 }
    };

    if (!isOpen) return null;

    return (
        <AnimatePresence>
            {isOpen && (
                <motion.div
                    key="modal-backdrop"
                    className="fixed inset-0 z-50 flex items-center justify-center p-4 bg-black bg-opacity-75"
                    initial="hidden"
                    animate="visible"
                    exit="hidden"
                    variants={backdropVariants}
                    transition={{ duration: 0.2 }}
                    onClick={closeOnOverlayClick ? onClose : undefined}
                >
                    <motion.div
                        key="modal-content"
                        className={`bg-surface-light dark:bg-surface-dark rounded-xl shadow-2xl w-full ${sizeClasses[size]} flex flex-col max-h-[90vh]`}
                        role="dialog"
                        aria-modal="true"
                        aria-labelledby="modal-title"
                        initial="hidden"
                        animate="visible"
                        exit="exit"
                        variants={modalVariants}
                        transition={{ type: "spring", stiffness: 300, damping: 30, duration: 0.3 }}
                        onClick={(e) => e.stopPropagation()} // Prevent closing when clicking inside modal
                    >
                        {/* Modal Header */}
                        <div className="flex items-center justify-between px-6 py-4 border-b border-gray-200 dark:border-gray-700">
                            {title && (
                                <h2 id="modal-title" className="text-lg font-semibold text-text-light dark:text-text-dark">
                                    {title}
                                </h2>
                            )}
                            <button
                                onClick={onClose}
                                className="p-1 rounded-full text-text-muted-light dark:text-text-muted-dark hover:bg-gray-200 dark:hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-primary"
                                aria-label="Close modal"
                            >
                                <X size={20} />
                            </button>
                        </div>

                        {/* Modal Body */}
                        <div className="px-6 py-5 overflow-y-auto flex-grow custom-scrollbar">
                            {children}
                        </div>

                        {/* Modal Footer */}
                        {footerContent && (
                            <div className="px-6 py-4 border-t border-gray-200 dark:border-gray-700 flex justify-end gap-3">
                                {footerContent}
                            </div>
                        )}
                    </motion.div>
                </motion.div>
            )}
        </AnimatePresence>
    );
};

export default Modal;
```

`src/components/documents/DocumentList.jsx`

```javascript


// frontend/src/components/documents/DocumentList.jsx
import React, { useState, useEffect, useCallback } from 'react';
import api from '../../services/api.js'; // Mocked for V1
import toast from 'react-hot-toast';
import { FileText, Edit3, Trash2, Loader2, AlertTriangle, CheckCircle } from 'lucide-react';
import IconButton from '../core/IconButton.jsx'; // Make sure IconButton is imported

// Props from LeftPanel: onSelectDocument is selectDocumentForAnalysis from AppStateContext
// selectedDocument is selectedDocumentForAnalysis from AppStateContext
function DocumentList({ onSelectDocument, selectedDocument }) { 
    const [files, setFiles] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState('');

    const fetchFiles = useCallback(async () => {
        setLoading(true);
        setError('');
        try {
            const userFiles = await api.getFiles(); // Mocked call
            setFiles(Array.isArray(userFiles) ? userFiles : []);
        } catch (err) {
            setError(err.message || "Failed to fetch mock documents.");
            toast.error("Could not load mock documents.");
            console.error("Mock getFiles error:", err);
        } finally {
            setLoading(false);
        }
    }, []);

    useEffect(() => {
        fetchFiles();
    }, [fetchFiles]);

    const handleRename = async (file, newOriginalName) => {
        if (!newOriginalName || newOriginalName === file.originalName) return;
        const toastId = toast.loading(`Renaming ${file.originalName} (mock)...`);
        try {
            await api.renameFile(file.serverFilename, newOriginalName); // Mocked
            toast.success(`Renamed to ${newOriginalName} (mock).`, { id: toastId });
            fetchFiles(); 
            if (selectedDocument?.serverFilename === file.serverFilename) {
                onSelectDocument({...file, originalName: newOriginalName});
            }
        } catch (err) {
            toast.error(`Mock rename failed: ${err.message}`, { id: toastId });
        }
    };

    const handleDelete = async (file) => {
        if (!window.confirm(`MOCK: Are you sure you want to delete "${file.originalName}"?`)) return;
        const toastId = toast.loading(`Deleting ${file.originalName} (mock)...`);
        try {
            await api.deleteFile(file.serverFilename); // Mocked
            toast.success(`${file.originalName} deleted (mock).`, { id: toastId });
            fetchFiles();
            if (selectedDocument?.serverFilename === file.serverFilename) {
                onSelectDocument(null); 
            }
        } catch (err) {
            toast.error(`Mock delete failed: ${err.message}`, { id: toastId });
        }
    };
    
    if (loading) {
        return (
            <div className="flex items-center justify-center p-4 text-text-muted-light dark:text-text-muted-dark">
                <Loader2 size={20} className="animate-spin mr-2" /> Loading documents...
            </div>
        );
    }

    if (error) {
        return (
            <div className="p-3 bg-red-500/10 border border-red-500/30 text-red-600 dark:text-red-300 rounded-md text-sm flex items-center gap-2">
                <AlertTriangle size={18} /> {error} 
                <button onClick={fetchFiles} className="ml-auto text-xs underline hover:text-red-400">Retry</button>
            </div>
        );
    }
    
    if (files.length === 0) {
        return <p className="text-center text-xs text-text-muted-light dark:text-text-muted-dark p-4">No documents uploaded (mock data is empty or not loading).</p>;
    }

    return (
        <div className="space-y-1.5 text-xs custom-scrollbar pr-1"> {/* Added pr-1 for scrollbar */}
            {files.map(file => {
                const isSelected = selectedDocument?.serverFilename === file.serverFilename;
                return (
                    <div 
                        key={file.serverFilename} 
                        onClick={() => onSelectDocument(isSelected ? null : file)} // Call the prop
                        className={`p-2.5 bg-surface-light dark:bg-gray-800 border rounded-md flex items-center justify-between hover:shadow-md transition-all duration-150 cursor-pointer
                                    ${isSelected 
                                        ? 'ring-2 ring-primary dark:ring-primary-light shadow-lg border-primary dark:border-primary-light' 
                                        : 'border-border-light dark:border-border-dark hover:border-gray-400 dark:hover:border-gray-500'}`}
                        title={`Select ${file.originalName} for analysis`}
                    >
                        <div className="flex items-center gap-2 truncate">
                            {isSelected ? 
                                <CheckCircle size={16} className="text-green-500 flex-shrink-0" /> :
                                <FileText size={16} className={`${isSelected ? 'text-white dark:text-primary-light' : 'text-primary dark:text-primary-light'} flex-shrink-0`} />
                            }
                            <span className={`truncate ${isSelected ? 'font-semibold text-primary dark:text-primary-light' : 'text-text-light dark:text-text-dark'}`} >
                                {file.originalName}
                            </span>
                        </div>
                        <div className="flex-shrink-0 flex items-center gap-0.5"> {/* Reduced gap for smaller buttons */}
                            <IconButton icon={Edit3} size="sm" variant="ghost" title="Rename"
                                onClick={(e) => { e.stopPropagation(); const newN = prompt(`Rename "${file.originalName}" to:`, file.originalName); if(newN && newN.trim() !== '' && newN !== file.originalName) handleRename(file, newN.trim()); }}
                                className="text-blue-500 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300 p-1" // Smaller padding
                            />
                            <IconButton icon={Trash2} size="sm" variant="ghost" title="Delete"
                                onClick={(e) => { e.stopPropagation(); handleDelete(file);}}
                                className="text-red-500 hover:text-red-700 dark:text-red-400 dark:hover:text-red-300 p-1" // Smaller padding
                            />
                        </div>
                    </div>
                );
            })}
        </div>
    );
}
export default DocumentList;
```

`src/components/documents/DocumentUpload.jsx`

```javascript
// frontend/src/components/documents/DocumentUpload.jsx
import React, { useState } from 'react';
import api from '../../services/api.js'; // Mocked for V1
import toast from 'react-hot-toast';
import { UploadCloud, FileText, XCircle, Paperclip } from 'lucide-react'; // Added Paperclip as per your icon list
import Button from '../core/Button.jsx'; // Use our custom Button

function DocumentUpload({ onUploadSuccess }) {
    const [selectedFile, setSelectedFile] = useState(null);
    const [isUploading, setIsUploading] = useState(false);
    const [uploadProgress, setUploadProgress] = useState(0);
    const [dragActive, setDragActive] = useState(false);

    const handleFileChange = (e) => {
        if (e.target.files && e.target.files[0]) {
            setSelectedFile(e.target.files[0]);
            // toast.info(`File selected: ${e.target.files[0].name}`);
        }
    };

    const handleDrag = (e) => {
        e.preventDefault();
        e.stopPropagation();
        if (e.type === "dragenter" || e.type === "dragover") {
            setDragActive(true);
        } else if (e.type === "dragleave") {
            setDragActive(false);
        }
    };

    const handleDrop = (e) => {
        e.preventDefault();
        e.stopPropagation();
        setDragActive(false);
        if (e.dataTransfer.files && e.dataTransfer.files[0]) {
            setSelectedFile(e.dataTransfer.files[0]);
            // toast.info(`File dropped: ${e.dataTransfer.files[0].name}`);
        }
    };

    const handleUpload = async () => {
        if (!selectedFile) {
            toast.error("Please select a file first.");
            return;
        }
        setIsUploading(true);
        setUploadProgress(0);
        const toastId = toast.loading(`Uploading ${selectedFile.name}... 0%`);
        
        const formData = new FormData();
        formData.append('file', selectedFile);

        try {
            // Simulate API call progress for mock
            if (typeof api.uploadFile === 'function' && api.uploadFile.constructor.name === 'AsyncFunction') {
                 await api.uploadFile(formData, (event) => { // Pass onUploadProgress callback
                    if (event.lengthComputable) {
                        const percent = Math.round((event.loaded * 100) / event.total);
                        setUploadProgress(percent);
                        toast.loading(`Uploading ${selectedFile.name}... ${percent}%`, { id: toastId, duration: 5000 });
                    }
                });
            } else { // Fallback for simpler mock without progress simulation in api.js
                 await api.uploadFile(formData); // Call the mock
                 // Simulate progress manually for UI testing if api.js mock doesn't
                 for (let p = 0; p <= 100; p += 20) {
                    await new Promise(res => setTimeout(res, 100));
                    setUploadProgress(p);
                    toast.loading(`Uploading ${selectedFile.name}... ${p}%`, { id: toastId, duration: 5000 });
                 }
            }

            toast.success(`${selectedFile.name} uploaded & processing (mock).`, { id: toastId, duration: 3000 });
            setSelectedFile(null);
            const fileInput = document.getElementById('file-upload-input');
            if(fileInput) fileInput.value = null; // Clear file input
            if (onUploadSuccess) onUploadSuccess(); // To refresh DocumentList
        } catch (error) {
            toast.error(`Upload failed: ${error.message || 'Unknown mock error'}`, { id: toastId, duration: 3000 });
            console.error("Upload failed (mock):", error);
        } finally {
            setIsUploading(false);
            // setUploadProgress(0); // Progress bar will disappear, or keep it at 100 for a moment
        }
    };

    // Icon for upload area - Using Paperclip as per your icon request
    const UploadAreaIcon = Paperclip;

    return (
        <div className="mb-4 p-1">
            <label 
                htmlFor="file-upload-input"
                onDragEnter={handleDrag} 
                onDragLeave={handleDrag} 
                onDragOver={handleDrag} 
                onDrop={handleDrop}
                className={`flex flex-col items-center justify-center w-full h-36 px-4 transition-colors duration-200 ease-in-out
                            bg-surface-light dark:bg-gray-800 
                            border-2 border-dashed rounded-lg cursor-pointer 
                            border-border-light dark:border-border-dark 
                            hover:border-primary dark:hover:border-primary-light
                            ${dragActive ? "border-primary dark:border-primary-light ring-2 ring-primary dark:ring-primary-light bg-primary/10 dark:bg-primary-dark/20" : ""}
                            ${isUploading ? "opacity-60 cursor-not-allowed" : ""}`}
            >
                <div className="flex flex-col items-center justify-center text-center">
                    <UploadAreaIcon size={36} className={`mb-2 transition-colors ${dragActive ? 'text-primary dark:text-primary-light' : 'text-text-muted-light dark:text-text-muted-dark'}`} />
                    <p className="mb-1 text-xs sm:text-sm text-text-muted-light dark:text-text-muted-dark">
                        <span className="font-semibold text-primary dark:text-primary-light">Click to upload</span> or drag and drop
                    </p>
                    <p className="text-[0.7rem] sm:text-xs text-text-muted-light dark:text-text-muted-dark">PDF, DOCX, TXT, PPTX, code files</p>
                </div>
                <input id="file-upload-input" type="file" className="hidden" onChange={handleFileChange} disabled={isUploading} 
                       accept=".pdf,.doc,.docx,.ppt,.pptx,.txt,.py,.js,.md,.html,.xml,.json,.csv,.log,.c,.cpp,.java" />
            </label>

            {selectedFile && (
                <div className="mt-2 p-2 bg-gray-100 dark:bg-gray-700 rounded-md flex items-center justify-between text-sm animate-fadeIn">
                    <div className="flex items-center gap-2 truncate">
                        <FileText size={18} className="text-primary flex-shrink-0" />
                        <span className="truncate text-text-light dark:text-text-dark" title={selectedFile.name}>{selectedFile.name}</span>
                        <span className="text-text-muted-light dark:text-text-muted-dark text-xs whitespace-nowrap">
                            ({(selectedFile.size / 1024).toFixed(1)} KB)
                        </span>
                    </div>
                    {!isUploading && (
                        <button onClick={() => setSelectedFile(null)} className="text-red-500 hover:text-red-700 dark:hover:text-red-400 transition-colors p-1 rounded-full hover:bg-red-500/10">
                            <XCircle size={18} />
                        </button>
                    )}
                </div>
            )}
            
            {isUploading && (
                <div className="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-1.5 mt-2 overflow-hidden">
                    <div 
                        className="bg-primary h-1.5 rounded-full transition-all duration-300 ease-linear" 
                        style={{ width: `${uploadProgress}%` }}
                    ></div>
                </div>
            )}

            <Button
                onClick={handleUpload}
                fullWidth
                className="mt-3 text-sm" // Uses .btn and .btn-primary styles from index.css
                variant="primary" 
                isLoading={isUploading}
                disabled={!selectedFile || isUploading} // Disable if no file or already uploading
                leftIcon={!isUploading ? <UploadCloud size={16} /> : null}
            >
                {isUploading ? `Uploading ${uploadProgress}%...` : "Upload Document"}
            </Button>
        </div>
    );
}
export default DocumentUpload;
```

`src/components/layout/CenterPanel.jsx`

```javascript
// import React, { useState, useEffect } from 'react';
// import ChatHistory from '../chat/ChatHistory';
// import ChatInput from '../chat/ChatInput';
// import api from '../../services/api';
// import { useAuth } from '../../hooks/useAuth';
// import { useAppState } from '../../contexts/AppStateContext';
// import toast from 'react-hot-toast';

// function CenterPanel({ messages, setMessages, currentSessionId, chatStatus, setChatStatus }) {
//     const { token } = useAuth();
//     const { selectedLLM } = useAppState(); // To know which LLM is active
//     const [useRag, setUseRag] = useState(false); // Local state for RAG toggle in this panel
//     const [isSending, setIsSending] = useState(false);
    
//     const handleSendMessage = async (inputText) => {
//         if (!inputText.trim() || !token || isSending) return;

//         const userMessage = {
//             id: `user-${Date.now()}`,
//             sender: 'user',
//             text: inputText.trim(),
//             timestamp: new Date().toISOString()
//         };
//         setMessages(prev => [...prev, userMessage]);
        
//         setIsSending(true);
//         setChatStatus(useRag ? "Searching documents & Thinking (Ollama RAG)..." : "Thinking (Gemini)...");

//         try {
//             const historyForBackend = messages.map(m => ({ // Only previous messages
//                 role: m.sender === 'bot' ? 'model' : 'user',
//                 parts: [{ text: m.text }]
//             }));

//             const payload = {
//                 query: inputText.trim(),
//                 history: historyForBackend,
//                 sessionId: currentSessionId,
//                 useRag: useRag // This flag is crucial for the backend orchestrator
//             };
            
//             const response = await api.sendMessage(payload); // Token auto-included by axios interceptor
            
//             // currentSessionId is managed by App.js if backend returns a new one
//             // For now, assume session ID remains the same unless explicitly changed by App.js

//             const botReply = response.reply;
//             setMessages(prev => [...prev, {
//                 id: `bot-${Date.now()}`,
//                 sender: 'bot',
//                 text: botReply.parts[0]?.text,
//                 thinking: botReply.thinking,
//                 references: botReply.references || [],
//                 timestamp: botReply.timestamp,
//                 source_pipeline: response.source_pipeline // Useful for display
//             }]);
//             setChatStatus(`Responded via ${response.source_pipeline}.`);
//         } catch (error) {
//             console.error("Error sending message:", error);
//             const errorText = error.response?.data?.message || error.message || 'Failed to get response.';
//             setMessages(prev => [...prev, { 
//                 id: `error-${Date.now()}`, 
//                 sender: 'bot', 
//                 text: `Error: ${errorText}` 
//             }]);
//             setChatStatus(`Error: ${errorText}`);
//             toast.error(errorText);
//         } finally {
//             setIsSending(false);
//         }
//     };

//     return (
//         <div className="flex flex-col h-full bg-background-light dark:bg-background-dark rounded-lg shadow-inner">
//             {/* Welcome Message - Conditional */}
//             {messages.length === 0 && !isSending && (
//                  <div className="p-8 text-center text-text-muted-light dark:text-text-muted-dark animate-fadeIn">
//                     <h2 className="text-2xl font-semibold mb-2">HELLO MY FRIEND,</h2>
//                     <p className="text-lg">HOW CAN I ASSIST YOU TODAY?</p>
//                     <p className="text-sm mt-4">
//                         Toggle "Use My Documents" below to chat with your uploaded files using Ollama RAG,
//                         or chat directly with {selectedLLM.toUpperCase()} for general queries.
//                     </p>
//                 </div>
//             )}

//             <ChatHistory messages={messages} isLoading={isSending} />
//             <ChatInput 
//                 onSendMessage={handleSendMessage} 
//                 isLoading={isSending} 
//                 currentStatus={chatStatus}
//                 useRag={useRag}
//                 setUseRag={setUseRag}
//             />
//         </div>
//     );
// }
// export default CenterPanel;






// src/components/layout/CenterPanel.jsx
import React, { useState } from 'react';
import ChatHistory from '../chat/ChatHistory';
import ChatInput from '../chat/ChatInput';
import api from '../../services/api';
import { useAuth } from '../../hooks/useAuth';
import { useAppState } from '../../contexts/AppStateContext';
import toast from 'react-hot-toast';

function CenterPanel({ messages, setMessages, currentSessionId, chatStatus, setChatStatus }) {
    const { token } = useAuth();
    // Get systemPrompt from global state
    const { selectedLLM, systemPrompt } = useAppState(); 
    const [useRag, setUseRag] = useState(false); // RAG toggle state
    const [isSending, setIsSending] = useState(false);
    
    const handleSendMessage = async (inputText) => {
        if (!inputText.trim() || !token || isSending) return;

        const userMessage = {
            id: `user-${Date.now()}-${Math.random().toString(16).slice(2)}`,
            sender: 'user',
            text: inputText.trim(),
            timestamp: new Date().toISOString()
        };
        setMessages(prev => [...prev, userMessage]);
        
        setIsSending(true);
        let thinkingStatus = "Thinking...";
        if (useRag) {
            thinkingStatus = `Searching docs & Thinking (${selectedLLM.toUpperCase()} RAG)...`;
        } else {
            thinkingStatus = `Thinking (${selectedLLM.toUpperCase()})...`;
        }
        // Add system prompt to status if it's custom or not the default
        const defaultInitialPrompt = "You are a helpful AI engineering tutor."; // Or fetch from your presets
        if (systemPrompt && systemPrompt !== defaultInitialPrompt) {
            thinkingStatus += ` (Mode: ${systemPrompt.substring(0,25)}...)`;
        }
        setChatStatus(thinkingStatus);


        try {
            const historyForBackend = messages.map(m => ({
                role: m.sender === 'bot' ? 'model' : 'user',
                parts: [{ text: m.text }]
            }));

            const payload = {
                query: inputText.trim(),
                history: historyForBackend,
                sessionId: currentSessionId,
                useRag: useRag,
                llmProvider: selectedLLM, // Send the selected LLM provider
                systemPrompt: systemPrompt // Send the current system prompt text
            };
            
            const response = await api.sendMessage(payload);
            
            const botReply = response.reply;
            if (botReply && botReply.parts && botReply.parts.length > 0) {
                setMessages(prev => [...prev, {
                    id: `bot-${Date.now()}-${Math.random().toString(16).slice(2)}`,
                    sender: 'bot',
                    text: botReply.parts[0]?.text,
                    thinking: botReply.thinking,
                    references: botReply.references || [],
                    timestamp: botReply.timestamp || new Date().toISOString(),
                    source_pipeline: response.source_pipeline
                }]);
                setChatStatus(`Responded via ${response.source_pipeline || selectedLLM.toUpperCase()}.`);
            } else {
                throw new Error("Invalid response structure from AI.");
            }

        } catch (error) {
            console.error("Error sending message:", error);
            const errorText = error.response?.data?.message || error.message || 'Failed to get response.';
            setMessages(prev => [...prev, { 
                id: `error-${Date.now()}-${Math.random().toString(16).slice(2)}`, 
                sender: 'bot', 
                text: `Error: ${errorText}`,
                timestamp: new Date().toISOString()
            }]);
            setChatStatus(`Error: ${errorText.substring(0,50)}...`);
            toast.error(errorText);
        } finally {
            setIsSending(false);
        }
    };

    return (
        <div className="flex flex-col h-full bg-background-light dark:bg-background-dark rounded-lg shadow-inner">
            {messages.length === 0 && !isSending && (
                 <div className="p-6 sm:p-8 text-center text-text-muted-light dark:text-text-muted-dark animate-fadeIn">
                    <h2 className="text-xl sm:text-2xl font-semibold mb-2 text-text-light dark:text-text-dark">HELLO MY FRIEND,</h2>
                    <p className="text-base sm:text-lg mb-3">HOW CAN I ASSIST YOU TODAY?</p>
                    <div className="text-xs sm:text-sm space-y-1">
                        <p>
                            Current LLM: <span className="font-semibold text-accent">{selectedLLM.toUpperCase()}</span>.
                        </p>
                        <p className="max-w-md mx-auto">
                            Assistant Mode: <span className="italic">"{systemPrompt.length > 60 ? systemPrompt.substring(0,60)+'...' : systemPrompt}"</span>
                        </p>
                        <p className="mt-2">
                            Toggle "Use My Docs" below for RAG-enhanced chat.
                        </p>
                    </div>
                </div>
            )}

            <ChatHistory messages={messages} isLoading={isSending} />
            <ChatInput 
                onSendMessage={handleSendMessage} 
                isLoading={isSending} 
                currentStatus={chatStatus}
                useRag={useRag}
                setUseRag={setUseRag}
            />
        </div>
    );
}
export default CenterPanel;
```

`src/components/layout/LeftCollapsedNav.jsx`

```javascript
// frontend/src/components/layout/LeftCollapsedNav.jsx
import React from 'react';
import { useAppState } from '../../contexts/AppStateContext.jsx';
import { Edit3, UploadCloud, FileText, ChevronRight, Settings2 } from 'lucide-react'; // Settings2 for fallback
import IconButton from '../core/IconButton.jsx'; 
import { motion } from 'framer-motion';

// Mapping icon names (or IDs) to Lucide components
const iconMap = {
    prompt: Edit3,       // Icon for "Custom Prompt"
    upload: UploadCloud, // Icon for "Upload Document"
    docs: FileText,      // Icon for "Document List"
};

function LeftCollapsedNav() {
    const { setIsLeftPanelOpen } = useAppState();

    // Define the items for the collapsed navigation bar
    const navItems = [
        { 
            id: 'prompt', 
            label: 'Custom Prompt', 
            iconName: 'prompt', // Matches key in iconMap
            action: () => { 
                setIsLeftPanelOpen(true); 
                // TODO: Optionally, also scroll to/focus the prompt section in LeftPanel
            } 
        },
        { 
            id: 'upload', 
            label: 'Upload Document', 
            iconName: 'upload', 
            action: () => { 
                setIsLeftPanelOpen(true);
                // TODO: Optionally, open LeftPanel and focus/highlight upload area
            } 
        },
        { 
            id: 'docs', 
            label: 'Document List', 
            iconName: 'docs', 
            action: () => { 
                setIsLeftPanelOpen(true); 
                // TODO: Optionally, open LeftPanel scrolled to document list
            } 
        },
    ];

    return (
        <motion.aside
            key="left-collapsed-nav" // Unique key for AnimatePresence
            initial={{ x: '-100%', opacity: 0 }}
            animate={{ x: '0%', opacity: 1 }}
            exit={{ x: '-100%', opacity: 0 }}
            transition={{ type: 'spring', stiffness: 300, damping: 30 }}
            // Styling for the thin vertical bar
            className="fixed left-0 top-16 bottom-0 z-30 w-14 sm:w-16 
                       bg-surface-light dark:bg-surface-dark 
                       border-r border-border-light dark:border-border-dark 
                       shadow-lg flex flex-col items-center py-3 space-y-2 custom-scrollbar"
        >
            {/* Button to open the full LeftPanel - Placed at the top */}
            <IconButton 
                icon={ChevronRight} 
                onClick={() => setIsLeftPanelOpen(true)} 
                title="Open Assistant Panel"
                ariaLabel="Open Assistant Panel"
                variant="ghost" 
                size="lg" // Make it prominent
                className="mb-2 text-text-muted-light dark:text-text-muted-dark hover:text-primary dark:hover:text-primary-light"
            />

            {/* Icons for different sections of LeftPanel */}
            {navItems.map(item => {
                const IconComponent = iconMap[item.iconName] || Settings2; // Fallback icon
                return (
                    <IconButton 
                        key={item.id}
                        icon={IconComponent}
                        onClick={item.action} // Action currently just opens the panel
                        title={item.label}
                        ariaLabel={item.label}
                        variant="ghost"
                        size="md" 
                        className="text-text-muted-light dark:text-text-muted-dark hover:text-primary dark:hover:text-primary-light"
                    />
                );
            })}
            {/* Add a flexible spacer if you want the open button pushed further down from items */}
            {/* <div className="flex-grow"></div> */}
        </motion.aside>
    );
}
export default LeftCollapsedNav;
```

`src/components/layout/LeftPanel.jsx`

```javascript
// frontend/src/components/layout/LeftPanel.jsx
import React, { useState, useEffect } from 'react';
import { useAppState } from '../../contexts/AppStateContext.jsx';
import DocumentUpload from '../documents/DocumentUpload.jsx';
import DocumentList from '../documents/DocumentList.jsx';   
import { PanelLeftClose, ChevronDown, ChevronUp, FilePlus, Settings2, Bot, BookOpen, Lightbulb } from 'lucide-react';
import IconButton from '../core/IconButton.jsx';
import { motion, AnimatePresence } from 'framer-motion'; // Added AnimatePresence here
import toast from 'react-hot-toast'; // For toast notifications

const PROMPT_PRESETS = [
    { id: 'friendly_tutor', name: 'Friendly Tutor', icon: Bot, text: "You are a friendly, patient, and encouraging tutor specializing in engineering and scientific topics for PhD students. Explain concepts clearly, break down complex ideas, use analogies, and offer positive reinforcement. Ask follow-up questions to ensure understanding." },
    { id: 'concept_explorer', name: 'Concept Explorer', icon: BookOpen, text: "You are an expert academic lecturer introducing a new, complex engineering or scientific concept. Your goal is to provide a deep, structured explanation. Define terms rigorously, outline the theory, provide relevant mathematical formulations (using Markdown), illustrative examples, and discuss applications or limitations pertinent to PhD-level research." },
    { id: 'knowledge_check', name: 'Knowledge Check', icon: Lightbulb, text: "You are assessing understanding of engineering/scientific topics. Ask targeted questions to test knowledge, identify misconceptions, and provide feedback on the answers. Start by asking the user what topic they want to be quizzed on." },
    { id: 'custom', name: 'Custom Prompt', icon: Settings2, text: "You are a helpful AI engineering tutor." }
];

function LeftPanel() {
    const { 
        setIsLeftPanelOpen, 
        systemPrompt, setSystemPrompt, 
        selectDocumentForAnalysis, selectedDocumentForAnalysis // Get these from AppStateContext
    } = useAppState();
    
    const [isPromptSectionOpen, setIsPromptSectionOpen] = useState(true);
    const [isDocManagementOpen, setIsDocManagementOpen] = useState(true);
    const [selectedPresetId, setSelectedPresetId] = useState('custom');

    useEffect(() => {
        const matchedPreset = PROMPT_PRESETS.find(p => p.text === systemPrompt);
        setSelectedPresetId(matchedPreset ? matchedPreset.id : 'custom');
    }, [systemPrompt]);

    const handlePresetChange = (event) => {
        const presetId = event.target.value;
        setSelectedPresetId(presetId);
        const selectedPreset = PROMPT_PRESETS.find(p => p.id === presetId);
        if (selectedPreset) {
            setSystemPrompt(selectedPreset.text);
        }
    };
    
    const [docListKey, setDocListKey] = useState(Date.now()); 
    const handleUploadSuccess = () => { 
        setDocListKey(Date.now()); 
        toast.success("Document list refreshed after upload.");
    };

    const SelectedPresetIcon = PROMPT_PRESETS.find(p => p.id === selectedPresetId)?.icon || Settings2;

    return (
        <div className="flex flex-col h-full">
            <div className="flex items-center justify-between mb-3 px-1 pt-1">
                <h2 className="text-sm font-semibold text-text-light dark:text-text-dark">Assistant Controls</h2>
                <IconButton 
                    icon={PanelLeftClose} 
                    onClick={() => setIsLeftPanelOpen(false)} 
                    title="Close Assistant Panel"
                    variant="ghost"
                    size="sm"
                    className="text-text-muted-light dark:text-text-muted-dark hover:text-primary"
                />
            </div>

            {/* Custom Prompt Section */}
            <div className="mb-4">
                <button 
                    onClick={() => setIsPromptSectionOpen(!isPromptSectionOpen)}
                    className="w-full flex items-center justify-between px-3 py-2.5 text-sm font-medium text-left text-text-light dark:text-text-dark bg-gray-50 dark:bg-gray-800 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-md focus:outline-none shadow-sm border border-border-light dark:border-border-dark"
                    aria-expanded={isPromptSectionOpen}
                >
                    <span className="flex items-center gap-2">
                        <SelectedPresetIcon size={16} className="text-primary dark:text-primary-light" />
                        Custom Prompt
                    </span>
                    {isPromptSectionOpen ? <ChevronUp size={18} /> : <ChevronDown size={18} />}
                </button>
                <AnimatePresence>
                    {isPromptSectionOpen && (
                        <motion.div 
                            key="prompt-section-content"
                            initial={{ height: 0, opacity: 0 }} 
                            animate={{ height: 'auto', opacity: 1 }} 
                            exit={{ height: 0, opacity: 0 }}
                            transition={{ duration: 0.2, ease: "easeInOut" }}
                            className="mt-2 p-3 bg-surface-light dark:bg-surface-dark border border-border-light dark:border-border-dark rounded-md shadow-inner overflow-hidden"
                        >
                            <label htmlFor="prompt-preset-select" className="block text-xs font-medium text-text-muted-light dark:text-text-muted-dark mb-1">
                                Prompt Mode:
                            </label>
                            <select
                                id="prompt-preset-select"
                                value={selectedPresetId}
                                onChange={handlePresetChange}
                                className="input-field mb-2 text-xs py-1.5"
                            >
                                {PROMPT_PRESETS.map(preset => (
                                    <option key={preset.id} value={preset.id}>{preset.name}</option>
                                ))}
                            </select>
                            
                            <label htmlFor="system-prompt-area" className="block text-xs font-medium text-text-muted-light dark:text-text-muted-dark mb-1">
                                System Prompt (Editable):
                            </label>
                            <textarea
                                id="system-prompt-area"
                                value={systemPrompt}
                                onChange={(e) => {
                                    setSystemPrompt(e.target.value);
                                    setSelectedPresetId('custom');
                                }}
                                rows="5"
                                className="input-field text-xs custom-scrollbar"
                                placeholder="Enter system prompt..."
                            />
                        </motion.div>
                    )}
                </AnimatePresence>
            </div>

            {/* Document Management Section */}
            <div className="flex-grow flex flex-col overflow-hidden">
                 <button 
                    onClick={() => setIsDocManagementOpen(!isDocManagementOpen)}
                    className="w-full flex items-center justify-between px-3 py-2.5 text-sm font-medium text-left text-text-light dark:text-text-dark bg-gray-50 dark:bg-gray-800 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-md focus:outline-none shadow-sm border border-border-light dark:border-border-dark mb-2"
                    aria-expanded={isDocManagementOpen}
                >
                    <span className="flex items-center gap-2"><FilePlus size={16} className="text-primary dark:text-primary-light" /> Document Management</span>
                    {isDocManagementOpen ? <ChevronUp size={18} /> : <ChevronDown size={18} />}
                </button>
                <AnimatePresence>
                    {isDocManagementOpen && (
                        <motion.div 
                            key="doc-management-content"
                            initial={{ height: 0, opacity: 0 }} 
                            animate={{ height: 'auto', opacity: 1 }} 
                            exit={{ height: 0, opacity: 0 }}
                            transition={{ duration: 0.2, ease: "easeInOut" }}
                            className="flex-grow flex flex-col overflow-hidden p-3 bg-surface-light dark:bg-surface-dark border border-border-light dark:border-border-dark rounded-md shadow-inner"
                        >
                            <DocumentUpload onUploadSuccess={handleUploadSuccess} />
                            <div className="mt-3 flex-grow overflow-y-auto custom-scrollbar">
                                <label htmlFor="doc-filter" className="block text-xs font-medium text-text-muted-light dark:text-text-muted-dark mb-1">Filter documents:</label>
                                 <select id="doc-filter" className="input-field text-xs mt-1 mb-2 py-1.5">
                                    <option value="all">All Documents</option>
                                    <option value="pdf">PDFs</option>
                                    {/* More filter options */}
                                </select>
                                <DocumentList 
                                    key={docListKey} // To re-fetch files on upload
                                    onSelectDocument={selectDocumentForAnalysis} // Pass setter from context
                                    selectedDocument={selectedDocumentForAnalysis} // Pass current selection from context
                                />
                            </div>
                        </motion.div>
                    )}
                </AnimatePresence>
            </div>
        </div>
    );
}
export default LeftPanel;
```

`src/components/layout/LLMSelectionModal.jsx`

```javascript
// import React, { useState, useEffect } from 'react';
// import { X, HardDrive, Cloud, Save, AlertCircle } from 'lucide-react';
// import api from '../../services/api';
// import toast from 'react-hot-toast';
// import { useAppState } from '../../contexts/AppStateContext';

// function LLMSelectionModal({ isOpen, onClose, currentLLM, onSelectLLM }) {
//     const { switchLLM: setGlobalLLM } = useAppState();
//     const [selectedProvider, setSelectedProvider] = useState(currentLLM);
//     const [geminiApiKey, setGeminiApiKey] = useState('');
//     const [loading, setLoading] = useState(false);
//     const [error, setError] = useState('');

//     useEffect(() => {
//         setSelectedProvider(currentLLM); // Sync with global state when modal opens
//         setGeminiApiKey(''); // Clear API key field
//         setError('');
//     }, [isOpen, currentLLM]);

//     const handleSave = async () => {
//         setLoading(true);
//         setError('');
//         toast.loading('Saving LLM preference...');

//         try {
//             if (selectedProvider === 'gemini' && !geminiApiKey.trim()) {
//                 // If switching to Gemini and no API key is provided, we can still switch
//                 // but the Gemini functionality will fail if the backend doesn't have a key.
//                 // OR, enforce API key input here if that's the desired flow.
//                 // For now, let's allow switching and let backend handle key presence.
//                 // A better UX might be to prompt for the key only if it's not already configured.
//             }
            
//             // Call backend to update user's LLM preference & API key if provided
//             // Backend needs to securely store this.
//             await api.updateUserLLMConfig({ 
//                 llmProvider: selectedProvider, 
//                 apiKey: selectedProvider === 'gemini' ? geminiApiKey.trim() : undefined 
//             });

//             setGlobalLLM(selectedProvider); // Update global app state
//             onSelectLLM(selectedProvider); // Inform parent (TopNav)
//             toast.dismiss();
//             toast.success(`Switched to ${selectedProvider.toUpperCase()} LLM.`);
//             onClose();
//         } catch (err) {
//             toast.dismiss();
//             const errorMessage = err.response?.data?.message || err.message || 'Failed to update LLM preference.';
//             setError(errorMessage);
//             toast.error(errorMessage);
//         } finally {
//             setLoading(false);
//         }
//     };

//     if (!isOpen) return null;

//     return (
//         <div className="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50 p-4 animate-fadeIn">
//             <div className="bg-surface-light dark:bg-surface-dark p-6 sm:p-8 rounded-xl shadow-2xl w-full max-w-lg transform transition-all">
//                 <div className="flex justify-between items-center mb-6">
//                     <h2 className="text-xl font-semibold text-text-light dark:text-text-dark">
//                         Switch LLM Provider
//                     </h2>
//                     <button onClick={onClose} className="text-text-muted-light dark:text-text-muted-dark hover:text-red-500 transition-colors">
//                         <X size={24} />
//                     </button>
//                 </div>

//                 {error && <div className="mb-4 p-3 bg-red-100 dark:bg-red-900 border border-red-400 dark:border-red-700 text-red-700 dark:text-red-200 rounded-md text-sm flex items-center gap-2"><AlertCircle size={18}/> {error}</div>}

//                 <div className="space-y-4">
//                     <p className="text-sm text-text-muted-light dark:text-text-muted-dark">
//                         Select your preferred Large Language Model provider. Your choice will be saved for future sessions.
//                     </p>
                    
//                     <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
//                         {['ollama', 'gemini'].map(provider => (
//                             <button
//                                 key={provider}
//                                 type="button"
//                                 onClick={() => setSelectedProvider(provider)}
//                                 className={`p-4 border rounded-lg text-left transition-all duration-150 focus:outline-none
//                                     ${selectedProvider === provider 
//                                         ? 'bg-primary-light dark:bg-primary-dark border-primary dark:border-primary-light ring-2 ring-primary dark:ring-primary-light shadow-lg' 
//                                         : 'bg-surface-light dark:bg-surface-dark border-gray-300 dark:border-gray-600 hover:border-primary-light dark:hover:border-primary-dark hover:shadow-md'
//                                     }`}
//                             >
//                                 <div className="flex items-center mb-1">
//                                     {provider === 'ollama' ? <HardDrive size={20} className={`mr-2 ${selectedProvider === provider ? 'text-primary dark:text-primary-light' : 'text-text-muted-light dark:text-text-muted-dark'}`} /> : <Cloud size={20} className={`mr-2 ${selectedProvider === provider ? 'text-primary dark:text-primary-light' : 'text-text-muted-light dark:text-text-muted-dark'}`} />}
//                                     <span className={`font-semibold ${selectedProvider === provider ? 'text-primary dark:text-primary-light' : 'text-text-light dark:text-text-dark'}`}>
//                                         {provider.toUpperCase()} LLM
//                                     </span>
//                                 </div>
//                                 <p className={`text-xs ${selectedProvider === provider ? 'text-primary-dark dark:text-primary' : 'text-text-muted-light dark:text-text-muted-dark'}`}>
//                                     {provider === 'ollama' ? 'Local & Private. Requires Ollama running.' : 'Cloud-based by Google. API Key may be required.'}
//                                 </p>
//                             </button>
//                         ))}
//                     </div>

//                     {selectedProvider === 'gemini' && (
//                         <div className="mt-4">
//                             <label htmlFor="modalGeminiApiKey" className="block text-sm font-medium text-text-light dark:text-text-dark mb-1">
//                                 Gemini API Key (if not already configured)
//                             </label>
//                             <input
//                                 type="password"
//                                 id="modalGeminiApiKey"
//                                 className="input-custom"
//                                 placeholder="Enter new or update existing Gemini API Key"
//                                 value={geminiApiKey}
//                                 onChange={(e) => setGeminiApiKey(e.target.value)}
//                                 disabled={loading}
//                             />
//                             <p className="text-xs text-text-muted-light dark:text-text-muted-dark mt-1">
//                                 Leave blank to use previously saved key. Provided key will be securely stored by the backend.
//                             </p>
//                         </div>
//                     )}
//                 </div>

//                 <div className="mt-8 flex justify-end gap-3">
//                     <button
//                         type="button"
//                         onClick={onClose}
//                         className="px-4 py-2 text-sm font-medium rounded-md text-text-light dark:text-text-dark bg-gray-200 dark:bg-gray-600 hover:bg-gray-300 dark:hover:bg-gray-500 transition-colors"
//                         disabled={loading}
//                     >
//                         Cancel
//                     </button>
//                     <button
//                         type="button"
//                         onClick={handleSave}
//                         className="btn-primary-custom flex items-center justify-center gap-2"
//                         disabled={loading}
//                     >
//                         {loading ? (
//                             <span className="animate-spin rounded-full h-4 w-4 border-t-2 border-b-2 border-white"></span>
//                         ) : (
//                             <Save size={18} />
//                         )}
//                         Save Preference
//                     </button>
//                 </div>
//             </div>
//         </div>
//     );
// }
// export default LLMSelectionModal;

// frontend/src/components/layout/LLMSelectionModal.jsx
import React, { useState, useEffect } from 'react';
import { useAppState } from '../../contexts/AppStateContext.jsx';
import api from '../../services/api.js'; // For V1, this is mocked
import toast from 'react-hot-toast';
import { X, Save, KeyRound, Link2, AlertCircle } from 'lucide-react';
import Modal from '../core/Modal.jsx'; // Using the generic Modal component
import Button from '../core/Button.jsx';
import LLMSelection from '../auth/LLMSelection.jsx';
import { motion } from 'framer-motion';

function LLMSelectionModal({ isOpen, onClose, currentLLM, onSelectLLM }) {
    // This component now acts as the content provider for the generic Modal
    const { switchLLM: setGlobalLLMPreference } = useAppState();
    
    const [locallySelectedLLM, setLocallySelectedLLM] = useState(currentLLM);
    const [geminiApiKeyInput, setGeminiApiKeyInput] = useState('');
    const [ollamaApiUrlInput, setOllamaApiUrlInput] = useState('');
    
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState('');

    useEffect(() => {
        if (isOpen) {
            setLocallySelectedLLM(currentLLM); // Sync with global when modal opens
            setGeminiApiKeyInput(''); 
            setOllamaApiUrlInput(''); 
            setError('');
        }
    }, [isOpen, currentLLM]);

    const handleSavePreference = async () => {
        setLoading(true); 
        setError('');
        const toastId = toast.loading('Saving LLM preference...');
        try {
            const configData = { llmProvider: locallySelectedLLM };
            if (locallySelectedLLM === 'gemini' && geminiApiKeyInput.trim()) {
                configData.apiKey = geminiApiKeyInput.trim();
            }
            if (locallySelectedLLM === 'ollama' && ollamaApiUrlInput.trim()) {
                configData.ollamaUrl = ollamaApiUrlInput.trim();
            }
            
            await api.updateUserLLMConfig(configData); // Mocked in V1
            
            setGlobalLLMPreference(locallySelectedLLM); // Update global AppStateContext
            if(onSelectLLM) onSelectLLM(locallySelectedLLM); // Inform parent (TopNav) if needed

            toast.dismiss(toastId);
            toast.success(`LLM preference updated to ${locallySelectedLLM.toUpperCase()} (mocked).`);
            onClose(); // Close the modal
        } catch (err) {
            toast.dismiss(toastId);
            const errorMessage = err.response?.data?.message || err.message || 'Failed to update LLM preference.';
            setError(errorMessage);
            toast.error(errorMessage);
        } finally {
            setLoading(false);
        }
    };
    
    const inputWrapperClass = "relative";
    const inputIconClass = "absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-text-muted-light dark:text-text-muted-dark pointer-events-none";
    const inputFieldStyledClass = "input-field pl-10 py-2 text-sm";

    return (
         <Modal 
            isOpen={isOpen} 
            onClose={onClose} 
            title="Switch LLM Provider" 
            size="lg"
            footerContent={ // Pass footer buttons to the generic Modal
                <>
                    <Button variant="ghost" onClick={onClose} disabled={loading} className="text-sm">Cancel</Button>
                    <Button onClick={handleSavePreference} isLoading={loading} className="text-sm" leftIcon={<Save size={16}/>}>
                        Save Preference
                    </Button>
                </>
            }
        >
            {/* This is the children prop for the generic Modal */}
            <div className="space-y-5"> 
                <p className="text-sm text-text-muted-light dark:text-text-muted-dark">
                    Select your preferred Large Language Model. Your choice will be saved for future sessions. (V1 uses mock data regardless).
                </p>
                <LLMSelection 
                    selectedLLM={locallySelectedLLM} 
                    onLlmChange={setLocallySelectedLLM}
                    disabled={loading}
                />
                {locallySelectedLLM === 'gemini' && (
                    <motion.div 
                        key="gemini-config-modal" 
                        initial={{ opacity: 0, height: 0 }} animate={{ opacity: 1, height: 'auto' }} exit={{ opacity: 0, height: 0 }}
                        className="mt-4 space-y-1 overflow-hidden"
                    >
                        <label htmlFor="modalGeminiApiKey" className="block text-xs font-medium text-text-muted-light dark:text-text-muted-dark mb-1">
                            Gemini API Key (Optional - Enter to update)
                        </label>
                        <div className={inputWrapperClass}>
                            <KeyRound className={inputIconClass} />
                            <input
                                type="password"
                                id="modalGeminiApiKey"
                                className={inputFieldStyledClass}
                                placeholder="Leave blank to use existing/default"
                                value={geminiApiKeyInput}
                                onChange={(e) => setGeminiApiKeyInput(e.target.value)}
                                disabled={loading}
                            />
                        </div>
                    </motion.div>
                )}
                {locallySelectedLLM === 'ollama' && (
                    <motion.div 
                        key="ollama-config-modal" 
                        initial={{ opacity: 0, height: 0 }} animate={{ opacity: 1, height: 'auto' }} exit={{ opacity: 0, height: 0 }}
                        className="mt-4 space-y-1 overflow-hidden"
                    >
                        <label htmlFor="modalOllamaUrl" className="block text-xs font-medium text-text-muted-light dark:text-text-muted-dark mb-1">
                            Ollama API URL (Optional - Enter to update)
                        </label>
                         <div className={inputWrapperClass}>
                            <Link2 className={inputIconClass} />
                            <input
                                type="text"
                                id="modalOllamaUrl"
                                className={inputFieldStyledClass}
                                placeholder="Default (usually http://localhost:11434)"
                                value={ollamaApiUrlInput}
                                onChange={(e) => setOllamaApiUrlInput(e.target.value)}
                                disabled={loading}
                            />
                        </div>
                    </motion.div>
                )}
                {/* Corrected error display */}
                {error && (
                    <div className="p-3 mt-3 bg-red-500/10 border border-red-500/30 text-red-600 dark:text-red-300 rounded-md text-sm flex items-center gap-2 animate-fadeIn">
                        <AlertCircle size={18}/> {error}
                    </div>
                )}
            </div>
        </Modal>
    );
}

export default LLMSelectionModal;
```

`src/components/layout/RightCollapsedNav.jsx`

```javascript
// frontend/src/components/layout/RightCollapsedNav.jsx
import React from 'react';
import { useAppState } from '../../contexts/AppStateContext.jsx';
import { HelpCircle, GitFork, Tags, ChevronLeft } from 'lucide-react';
import IconButton from '../core/IconButton.jsx';
import { motion } from 'framer-motion';

const iconMap = {
    HelpCircle: HelpCircle,
    Tags: Tags,
    GitFork: GitFork,
};

function RightCollapsedNav() {
    const { setIsRightPanelOpen } = useAppState();

    const navItems = [
        { id: 'faq', label: 'FAQ Generator', iconName: 'HelpCircle', action: () => { setIsRightPanelOpen(true); /* TODO: set analysis type contextually */ } },
        { id: 'topics', label: 'Key Topics Extractor', iconName: 'Tags', action: () => { setIsRightPanelOpen(true); } },
        { id: 'mindmap', label: 'Mind Map Creator', iconName: 'GitFork', action: () => { setIsRightPanelOpen(true); } },
    ];

    return (
        <motion.aside
            key="right-collapsed-nav"
            initial={{ x: '100%', opacity: 0 }}
            animate={{ x: '0%', opacity: 1 }}
            exit={{ x: '100%', opacity: 0 }}
            transition={{ type: 'spring', stiffness: 300, damping: 30 }}
            className="fixed right-0 top-16 bottom-0 z-30 w-14 sm:w-16 bg-surface-light dark:bg-surface-dark border-l border-border-light dark:border-border-dark shadow-lg flex-col items-center py-3 space-y-2 hidden md:flex"
        >
            {/* Open Panel Button AT THE TOP */}
            <IconButton 
                icon={ChevronLeft} 
                onClick={() => setIsRightPanelOpen(true)} 
                title="Open Analyzer Panel"
                ariaLabel="Open Analyzer Panel"
                variant="ghost" 
                size="lg"
                className="mb-2 text-text-muted-light dark:text-text-muted-dark hover:text-primary dark:hover:text-primary-light"
            />
            {navItems.map(item => {
                 const Icon = iconMap[item.iconName] || HelpCircle;
                return (
                    <IconButton 
                        key={item.id}
                        icon={Icon}
                        onClick={item.action}
                        title={item.label}
                        ariaLabel={item.label}
                        variant="ghost"
                        size="md"
                        className="text-text-muted-light dark:text-text-muted-dark hover:text-primary dark:hover:text-primary-light"
                    />
                );
            })}
        </motion.aside>
    );
}
export default RightCollapsedNav;
```

`src/components/layout/RightPanel.jsx`

```javascript
// import React, { useState } from 'react';
// import AnalysisTool from '../analysis/AnalysisTool';
// import { ChevronDown, ChevronUp, Telescope } from 'lucide-react'; // Example icons

// function RightPanel() {
//     const [isAnalyzerOpen, setIsAnalyzerOpen] = useState(true);
//     // TODO: Manage state for selected document for analysis, analysis results for each tool

//     return (
//         <div className="flex flex-col h-full">
//             <button 
//                 onClick={() => setIsAnalyzerOpen(!isAnalyzerOpen)}
//                 className="w-full flex items-center justify-between px-3 py-2 text-sm font-medium text-left text-text-light dark:text-text-dark bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 rounded-md focus:outline-none mb-2"
//             >
//                 <span><Telescope size={16} className="inline mr-2" /> Advanced Analyzer</span>
//                 {isAnalyzerOpen ? <ChevronUp size={18} /> : <ChevronDown size={18} />}
//             </button>

//             {isAnalyzerOpen && (
//                 <div className="flex-grow space-y-3 overflow-y-auto animate-fadeIn p-1">
//                     {/* 
//                         Here you'd pass the selected document from LeftPanel (or a global context) 
//                         to each AnalysisTool instance. This requires more state management.
//                         For simplicity, AnalysisTool will internally manage its state for now.
//                     */}
//                     <AnalysisTool toolType="faq" title="FAQ Generator" icon="HelpCircle" />
//                     <AnalysisTool toolType="topics" title="Key Topics Extractor" icon="Tags" />
//                     <AnalysisTool toolType="mindmap" title="Mind Map Creator" icon="GitFork" />
//                 </div>
//             )}
//         </div>
//     );
// }
// export default RightPanel;












// frontend/src/components/layout/RightPanel.jsx
import React, { useState } from 'react';
import { useAppState } from '../../contexts/AppStateContext';
import AnalysisTool from '../analysis/AnalysisTool.jsx'; // Added .jsx
import { PanelRightClose, ChevronDown, ChevronUp, Telescope } from 'lucide-react';
import IconButton from '../core/IconButton.jsx'; // Added .jsx
import { motion } from 'framer-motion';

function RightPanel() {
    const { setIsRightPanelOpen, selectedDocumentForAnalysis } = useAppState();
    const [isAnalyzerOpen, setIsAnalyzerOpen] = useState(true);

    const currentSelectedDocFilename = selectedDocumentForAnalysis?.originalName || null;

    return (
        <div className="flex flex-col h-full p-3 sm:p-4 bg-surface-light dark:bg-surface-dark text-text-light dark:text-text-dark custom-scrollbar">
            <div className="flex items-center justify-between mb-4 pb-2 border-b border-border-light dark:border-border-dark">
                <h2 className="text-base font-semibold">Advanced Analyzer</h2>
                <IconButton 
                    icon={PanelRightClose} 
                    onClick={() => setIsRightPanelOpen(false)} 
                    title="Close Analyzer Panel"
                    variant="ghost"
                    size="sm"
                    className="text-text-muted-light dark:text-text-muted-dark hover:text-primary dark:hover:text-primary-light"
                />
            </div>
            
            <button 
                onClick={() => setIsAnalyzerOpen(!isAnalyzerOpen)}
                className="w-full flex items-center justify-between px-3 py-2.5 text-sm font-medium text-left bg-gray-50 dark:bg-gray-800 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-md focus:outline-none shadow-sm border border-border-light dark:border-border-dark mb-3"
            >
                <span className="flex items-center gap-2"><Telescope size={16} /> Analysis Tools</span>
                {isAnalyzerOpen ? <ChevronUp size={18} /> : <ChevronDown size={18} />}
            </button>

            {isAnalyzerOpen && (
                <motion.div 
                    initial={{ height: 0, opacity: 0 }} 
                    animate={{ height: 'auto', opacity: 1 }} 
                    exit={{ height: 0, opacity: 0 }}
                    transition={{ duration: 0.2, ease: "easeInOut" }}
                    className="flex-grow space-y-3 overflow-y-auto custom-scrollbar pr-1"
                >
                    {!currentSelectedDocFilename && (
                        <div className="p-4 text-xs text-center text-text-muted-light dark:text-text-muted-dark bg-gray-50 dark:bg-gray-800 rounded-md border border-dashed border-border-light dark:border-border-dark">
                            <p>Select a document from the left panel to enable analysis tools.</p>
                        </div>
                    )}
                    <AnalysisTool toolType="faq" title="FAQ Generator" iconName="HelpCircle" selectedDocumentFilename={currentSelectedDocFilename} />
                    <AnalysisTool toolType="topics" title="Key Topics Extractor" iconName="Tags" selectedDocumentFilename={currentSelectedDocFilename} />
                    <AnalysisTool toolType="mindmap" title="Mind Map Creator" iconName="GitFork" selectedDocumentFilename={currentSelectedDocFilename} />
                </motion.div>
            )}
        </div>
    );
}
export default RightPanel;
```

`src/components/layout/TopNav.jsx`

```javascript
// import React, { useState } from 'react';
// import { useAuth } from '../../hooks/useAuth';
// import { useAppState } from '../../contexts/AppStateContext';
// import ThemeToggle from '../common/ThemeToggle';
// import { LogOut, User, MessageSquare, History, Settings, Cpu, Zap, ServerCrash, Server } from 'lucide-react'; // Cpu for LLM, Zap for Online, ServerCrash for Offline
// import LLMSelectionModal from './LLMSelectionModal'; // New component for LLM switching

// function TopNav({ onNewChat, onHistoryClick, orchestratorStatus }) {
//     const { user, logout } = useAuth();
//     const { selectedLLM, switchLLM, setIsLeftPanelOpen, setIsRightPanelOpen, isLeftPanelOpen, isRightPanelOpen } = useAppState();
//     const [isLLMModalOpen, setIsLLMModalOpen] = useState(false);
    
//     const getStatusIndicator = () => {
//         if (orchestratorStatus.status === "ok") {
//             return <Zap size={18} className="text-green-400 animate-pulse" title="Backend Online" />;
//         } else if (orchestratorStatus.status === "loading") {
//             return <div className="animate-spin rounded-full h-4 w-4 border-t-2 border-b-2 border-yellow-400" title="Connecting..."></div>;
//         } else {
//             return <ServerCrash size={18} className="text-red-400" title={`Backend Offline: ${orchestratorStatus.message}`} />;
//         }
//     };

//     return (
//         <>
//             <nav className="fixed top-0 left-0 right-0 z-40 bg-surface-light dark:bg-surface-dark border-b border-gray-200 dark:border-gray-700 shadow-sm h-16 flex items-center justify-between px-4 sm:px-6">
//                 {/* Left Side: Branding & Panel Toggles */}
//                 <div className="flex items-center gap-2">
//                      <button 
//                         onClick={() => setIsLeftPanelOpen(prev => !prev)} 
//                         className="p-2 rounded-md hover:bg-gray-200 dark:hover:bg-gray-700 lg:hidden"
//                         title={isLeftPanelOpen ? "Close Assistant Panel" : "Open Assistant Panel"} 
//                         aria-label="Toggle Assistant Panel"
//                     >
//                         <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d={isLeftPanelOpen ? "M6 18L18 6M6 6l12 12" : "M4 6h16M4 12h16M4 18h7"}></path></svg>
//                     </button>
//                     <a href="/" className="flex items-center gap-2 text-xl font-semibold text-text-light dark:text-text-dark">
//                         {/* Replace with your logo if you have one */}
//                         <Server size={28} className="text-primary dark:text-primary-light" />
//                         <span>AI Tutor</span>
//                     </a>
//                 </div>

//                 {/* Center Controls */}
//                 <div className="hidden md:flex items-center gap-2">
//                     <button
//                         onClick={onNewChat}
//                         className="flex items-center gap-1.5 px-3 py-1.5 text-sm font-medium rounded-md text-text-light dark:text-text-dark bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors"
//                         title="Start a new chat session"
//                     >
//                         <MessageSquare size={16} /> New Chat
//                     </button>
//                     <button
//                         onClick={onHistoryClick}
//                         className="flex items-center gap-1.5 px-3 py-1.5 text-sm font-medium rounded-md text-text-light dark:text-text-dark bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors"
//                         title="View chat history (Coming Soon)"
//                     >
//                         <History size={16} /> History
//                     </button>
//                     <button
//                         onClick={() => setIsLLMModalOpen(true)}
//                         className="flex items-center gap-1.5 px-3 py-1.5 text-sm font-medium rounded-md text-text-light dark:text-text-dark bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors"
//                         title={`Switch LLM (Current: ${selectedLLM.toUpperCase()})`}
//                     >
//                         <Cpu size={16} /> {selectedLLM.toUpperCase()}
//                     </button>
//                 </div>

//                 {/* Right Side: Theme, User, Logout */}
//                 <div className="flex items-center gap-2 sm:gap-3">
//                     {getStatusIndicator()}
//                     <ThemeToggle />
//                     <div className="relative group">
//                         <button className="p-1.5 bg-primary-light dark:bg-primary-dark text-white rounded-full focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-surface-light dark:focus:ring-offset-surface-dark focus:ring-primary">
//                             <User size={20} />
//                         </button>
//                         <div className="absolute right-0 mt-2 w-48 bg-surface-light dark:bg-surface-dark rounded-md shadow-lg py-1 opacity-0 group-hover:opacity-100 focus-within:opacity-100 transition-opacity duration-150 ease-in-out transform scale-95 group-hover:scale-100 focus-within:scale-100 origin-top-right invisible group-hover:visible focus-within:visible">
//                             <div className="px-4 py-2 text-sm text-text-light dark:text-text-dark border-b border-gray-200 dark:border-gray-600">
//                                 Signed in as <br/><strong>{user?.username || 'User'}</strong>
//                             </div>
//                             <button
//                                 onClick={() => { /* TODO: User Profile/Settings Modal */ toast.info("Profile settings coming soon!"); }}
//                                 className="w-full text-left px-4 py-2 text-sm text-text-light dark:text-text-dark hover:bg-gray-100 dark:hover:bg-gray-700 flex items-center gap-2"
//                             >
//                                 <Settings size={16} /> Profile
//                             </button>
//                             <button
//                                 onClick={logout}
//                                 className="w-full text-left px-4 py-2 text-sm text-red-600 dark:text-red-400 hover:bg-red-50 dark:hover:bg-red-900 flex items-center gap-2"
//                             >
//                                 <LogOut size={16} /> Logout
//                             </button>
//                         </div>
//                     </div>
//                      <button 
//                         onClick={() => setIsRightPanelOpen(prev => !prev)} 
//                         className="p-2 rounded-md hover:bg-gray-200 dark:hover:bg-gray-700 lg:hidden"
//                         title={isRightPanelOpen ? "Close Analyzer Panel" : "Open Analyzer Panel"} 
//                         aria-label="Toggle Analyzer Panel"
//                     >
//                         <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d={isRightPanelOpen ? "M6 18L18 6M6 6l12 12" : "M4 6h16M4 12h7m-7 6h16"}></path></svg>
//                     </button>
//                 </div>
//             </nav>
//             <LLMSelectionModal 
//                 isOpen={isLLMModalOpen} 
//                 onClose={() => setIsLLMModalOpen(false)} 
//                 currentLLM={selectedLLM}
//                 onSelectLLM={(llm) => {
//                     switchLLM(llm);
//                     setIsLLMModalOpen(false);
//                 }}
//             />
//         </>
//     );
// }
// export default TopNav;

// import React, { useState } from 'react';
// import { useAuth } from '../../hooks/useAuth';
// import { useAppState } from '../../contexts/AppStateContext';
// import ThemeToggle from '../common/ThemeToggle';
// import LLMSelectionModal from './LLMSelectionModal';
// import { 
//     LogOut, User, MessageSquare, History as HistoryIcon, Settings, Cpu, Zap, ServerCrash, Server, 
//     PanelLeftClose, PanelRightClose, PanelLeftOpen, PanelRightOpen, Menu // Lucide icons
// } from 'lucide-react';
// import toast from 'react-hot-toast'; // For placeholder actions

// function TopNav({ onNewChat, onHistoryClick, orchestratorStatus }) {
//     const { user, logout } = useAuth();
//     const { 
//         selectedLLM, switchLLM, 
//         isLeftPanelOpen, setIsLeftPanelOpen,
//         isRightPanelOpen, setIsRightPanelOpen
//     } = useAppState();
    
//     const [isLLMModalOpen, setIsLLMModalOpen] = useState(false);
    
//     const getStatusIndicator = () => {
//         if (!orchestratorStatus) return <div title="Status unavailable" className="w-4 h-4 bg-gray-400 rounded-full"></div>;
//         if (orchestratorStatus.status === "ok") {
//             return <Zap size={18} className="text-green-400 animate-pulse" title="Backend Online" />;
//         } else if (orchestratorStatus.status === "loading") {
//             return <div className="animate-spin rounded-full h-4 w-4 border-t-2 border-b-2 border-yellow-400" title="Connecting..."></div>;
//         } else {
//             return <ServerCrash size={18} className="text-red-400" title={`Backend Offline: ${orchestratorStatus.message}`} />;
//         }
//     };

//     return (
//         <>
//             <nav className="fixed top-0 left-0 right-0 z-40 bg-surface-light dark:bg-surface-dark border-b border-gray-200 dark:border-gray-700 shadow-sm h-16 flex items-center justify-between px-2 sm:px-4">
//                 {/* Left Side: Panel Toggle & Branding */}
//                 <div className="flex items-center gap-2">
//                     <button 
//                         onClick={() => setIsLeftPanelOpen(prev => !prev)} 
//                         className="p-2 rounded-md text-text-muted-light dark:text-text-muted-dark hover:bg-gray-200 dark:hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-primary"
//                         title={isLeftPanelOpen ? "Hide Assistant Panel" : "Show Assistant Panel"} 
//                         aria-label="Toggle Assistant Panel"
//                     >
//                         {isLeftPanelOpen ? <PanelLeftClose size={20} /> : <PanelLeftOpen size={20} />}
//                     </button>
//                     <a href="/" className="flex items-center gap-1.5 sm:gap-2 text-lg sm:text-xl font-semibold text-text-light dark:text-text-dark">
//                         <Server size={24} className="text-primary dark:text-primary-light" />
//                         <span className="hidden sm:inline">AI Tutor</span>
//                     </a>
//                 </div>

//                 {/* Center Controls - More adaptive */}
//                 <div className="flex-1 flex justify-center px-2">
//                     <div className="flex items-center gap-1 sm:gap-2">
//                         <button
//                             onClick={onNewChat}
//                             className="flex items-center gap-1 px-2 py-1.5 text-xs sm:text-sm font-medium rounded-md text-text-light dark:text-text-dark bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors"
//                             title="Start a new chat session"
//                         >
//                             <MessageSquare size={14} /> <span className="hidden sm:inline">New Chat</span>
//                         </button>
//                         <button
//                             onClick={onHistoryClick}
//                             className="flex items-center gap-1 px-2 py-1.5 text-xs sm:text-sm font-medium rounded-md text-text-light dark:text-text-dark bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors"
//                             title="View chat history (Coming Soon)"
//                         >
//                             <HistoryIcon size={14} /> <span className="hidden sm:inline">History</span>
//                         </button>
//                         <button
//                             onClick={() => setIsLLMModalOpen(true)}
//                             className="flex items-center gap-1 px-2 py-1.5 text-xs sm:text-sm font-medium rounded-md text-text-light dark:text-text-dark bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors"
//                             title={`Switch LLM (Current: ${selectedLLM.toUpperCase()})`}
//                         >
//                             <Cpu size={14} /> <span className="hidden xs:inline">{selectedLLM.toUpperCase()}</span>
//                         </button>
//                     </div>
//                 </div>


//                 {/* Right Side: Status, Theme, User, Panel Toggle */}
//                 <div className="flex items-center gap-1.5 sm:gap-2">
//                     {getStatusIndicator()}
//                     <ThemeToggle />
//                     <div className="relative group">
//                         <button className="p-1.5 bg-primary-light dark:bg-primary-dark text-white rounded-full focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-surface-light dark:focus:ring-offset-surface-dark focus:ring-primary">
//                             <User size={18} />
//                         </button>
//                         <div className="absolute right-0 mt-2 w-48 bg-surface-light dark:bg-surface-dark rounded-md shadow-lg py-1 opacity-0 group-hover:opacity-100 focus-within:opacity-100 transition-opacity duration-150 ease-in-out transform scale-95 group-hover:scale-100 focus-within:scale-100 origin-top-right invisible group-hover:visible focus-within:visible z-50">
//                             <div className="px-4 py-2 text-sm text-text-light dark:text-text-dark border-b border-gray-200 dark:border-gray-600">
//                                 Signed in as <br/><strong>{user?.username || 'User'}</strong>
//                             </div>
//                             <button
//                                 onClick={() => toast.info("Profile settings coming soon!")}
//                                 className="w-full text-left px-4 py-2 text-sm text-text-light dark:text-text-dark hover:bg-gray-100 dark:hover:bg-gray-700 flex items-center gap-2"
//                             >
//                                 <Settings size={16} /> Profile
//                             </button>
//                             <button
//                                 onClick={logout}
//                                 className="w-full text-left px-4 py-2 text-sm text-red-600 dark:text-red-400 hover:bg-red-50 dark:hover:bg-red-900 flex items-center gap-2"
//                             >
//                                 <LogOut size={16} /> Logout
//                             </button>
//                         </div>
//                     </div>
//                     <button 
//                         onClick={() => setIsRightPanelOpen(prev => !prev)} 
//                         className="p-2 rounded-md text-text-muted-light dark:text-text-muted-dark hover:bg-gray-200 dark:hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-primary"
//                         title={isRightPanelOpen ? "Hide Analyzer Panel" : "Show Analyzer Panel"} 
//                         aria-label="Toggle Analyzer Panel"
//                     >
//                         {isRightPanelOpen ? <PanelRightClose size={20} /> : <PanelRightOpen size={20} />}
//                     </button>
//                 </div>
//             </nav>
//             <LLMSelectionModal 
//                 isOpen={isLLMModalOpen} 
//                 onClose={() => setIsLLMModalOpen(false)} 
//                 currentLLM={selectedLLM}
//                 onSelectLLM={(llm) => { // This callback is passed to the modal
//                     switchLLM(llm); // Update global state via AppStateContext
//                     // The modal will also call its own API to save this preference
//                     setIsLLMModalOpen(false);
//                 }}
//             />
//         </>
//     );
// }
// export default TopNav;












// frontend/src/components/layout/TopNav.jsx
import React, { useState } from 'react';
import { useAuth } from '../../hooks/useAuth';
import { useAppState } from '../../contexts/AppStateContext';
import ThemeToggle from '../common/ThemeToggle.jsx';
import LLMSelectionModal from './LLMSelectionModal.jsx';
import { 
    LogOut, User, MessageSquare, History as HistoryIcon, Settings, Cpu, Zap, ServerCrash, Server 
} from 'lucide-react';
import toast from 'react-hot-toast';

function TopNav({ onNewChat, onHistoryClick, orchestratorStatus }) {
    const { user, logout } = useAuth();
    const { selectedLLM, switchLLM } = useAppState(); // Panels are NOT controlled from here
    const [isLLMModalOpen, setIsLLMModalOpen] = useState(false);
    
    const getStatusIndicator = () => { /* ... as provided before ... */ };

    return (
        <>
            <nav className="fixed top-0 left-0 right-0 z-40 bg-surface-light dark:bg-surface-dark border-b border-border-light dark:border-border-dark shadow-sm h-16 flex items-center justify-between px-2 sm:px-4">
                {/* Left Side: Branding (No panel toggle here) */}
                <div className="flex items-center gap-2">
                    <a href="/" className="flex items-center gap-1.5 sm:gap-2 text-lg sm:text-xl font-semibold text-text-light dark:text-text-dark">
                        <Server size={24} className="text-primary dark:text-primary-light" />
                        <span className="hidden sm:inline">AI Tutor</span>
                    </a>
                </div>

                {/* Center Controls */}
                <div className="flex-1 flex justify-center px-2">
                    <div className="flex items-center gap-1 sm:gap-2">
                        {/* New Chat, History, LLM buttons as before */}
                         <button
                            onClick={onNewChat}
                            className="flex items-center gap-1 px-2 py-1.5 text-xs sm:text-sm font-medium rounded-md text-text-light dark:text-text-dark bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors"
                            title="Start a new chat session"
                        >
                            <MessageSquare size={14} /> <span className="hidden sm:inline">New Chat</span>
                        </button>
                        <button
                            onClick={onHistoryClick}
                            className="flex items-center gap-1 px-2 py-1.5 text-xs sm:text-sm font-medium rounded-md text-text-light dark:text-text-dark bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors"
                            title="View chat history"
                        >
                            <HistoryIcon size={14} /> <span className="hidden sm:inline">History</span>
                        </button>
                        <button
                            onClick={() => setIsLLMModalOpen(true)}
                            className="flex items-center gap-1 px-2 py-1.5 text-xs sm:text-sm font-medium rounded-md text-text-light dark:text-text-dark bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors"
                            title={`Switch LLM (Current: ${selectedLLM.toUpperCase()})`}
                        >
                            <Cpu size={14} /> <span className="hidden xs:inline">{selectedLLM.toUpperCase()}</span>
                        </button>
                    </div>
                </div>

                {/* Right Side: Status, Theme, User (No panel toggle here) */}
                <div className="flex items-center gap-1.5 sm:gap-2">
                    {getStatusIndicator()}
                    <ThemeToggle />
                    <div className="relative group">
                        <button className="p-1.5 bg-primary-light dark:bg-primary-dark text-white rounded-full focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-surface-light dark:focus:ring-offset-surface-dark focus:ring-primary">
                            <User size={18} />
                        </button>
                        {/* User Dropdown Menu */}
                        <div className="absolute right-0 mt-2 w-48 bg-surface-light dark:bg-surface-dark rounded-md shadow-lg py-1 opacity-0 group-hover:opacity-100 focus-within:opacity-100 transition-opacity duration-150 ease-in-out transform scale-95 group-hover:scale-100 focus-within:scale-100 origin-top-right invisible group-hover:visible focus-within:visible z-50">
                            <div className="px-4 py-2 text-sm text-text-light dark:text-text-dark border-b border-border-light dark:border-border-dark">
                                Signed in as <br/><strong>{user?.username || 'User'}</strong>
                            </div>
                            <button
                                onClick={() => toast.info("Profile settings coming soon!")}
                                className="w-full text-left px-4 py-2 text-sm text-text-light dark:text-text-dark hover:bg-gray-100 dark:hover:bg-gray-700 flex items-center gap-2"
                            >
                                <Settings size={16} /> Profile
                            </button>
                            <button
                                onClick={logout}
                                className="w-full text-left px-4 py-2 text-sm text-red-600 dark:text-red-400 hover:bg-red-50 dark:hover:bg-red-900 flex items-center gap-2"
                            >
                                <LogOut size={16} /> Logout
                            </button>
                        </div>
                    </div>
                </div>
            </nav>
            <LLMSelectionModal 
                isOpen={isLLMModalOpen} 
                onClose={() => setIsLLMModalOpen(false)} 
                currentLLM={selectedLLM}
                onSelectLLM={(llm) => {
                    switchLLM(llm);
                    setIsLLMModalOpen(false);
                }}
            />
        </>
    );
}
export default TopNav;



```

`src/contexts/AppStateContext.jsx`

```javascript
// // frontend/src/contexts/AppStateContext.jsx
// import React, { createContext, useState, useContext, useEffect } from 'react';

// export const AppStateContext = createContext(null);

// export const useAppState = () => {
//     const context = useContext(AppStateContext);
//     if (!context) throw new Error('useAppState must be used within an AppStateProvider');
//     return context;
// };

// const INITIAL_DEV_SESSION_ID = `dev-ui-session-${Date.now()}`; 
// const defaultSystemPromptText = "You are assessing understanding of engineering/scientific topics. Ask targeted questions to test knowledge, identify misconceptions, and provide feedback on the answers. Start by asking the user what topic they want to be quizzed on.";

// export const AppStateProvider = ({ children }) => {
//     const [theme, setThemeState] = useState(() => localStorage.getItem('theme') || 'dark');
//     const [selectedLLM, setSelectedLLM] = useState(localStorage.getItem('selectedLLM') || 'ollama');
//     const [isLeftPanelOpen, setIsLeftPanelOpen] = useState(true);
//     const [isRightPanelOpen, setIsRightPanelOpen] = useState(true); 
    
//     const [currentSessionId, setCurrentSessionIdState] = useState(() => {
//         return localStorage.getItem('aiTutorSessionId') || INITIAL_DEV_SESSION_ID;
//     });
    
//     const [systemPrompt, setSystemPromptState] = useState(
//         localStorage.getItem('aiTutorSystemPrompt') || defaultSystemPromptText
//     );
    
//     // THIS IS THE STATE FOR THE SELECTED DOCUMENT
//     const [selectedDocumentForAnalysis, setSelectedDocumentForAnalysisState] = useState(null); // Stores { originalName, serverFilename, ... } or null

//     const toggleTheme = () => {
//         setThemeState(prevTheme => {
//             const newTheme = prevTheme === 'light' ? 'dark' : 'light';
//             localStorage.setItem('theme', newTheme);
//             return newTheme;
//         });
//     };
    
//     const switchLLM = (llm) => {
//         setSelectedLLM(llm);
//         localStorage.setItem('selectedLLM', llm);
//     };

//     const setSessionId = (sessionId) => {
//         const newId = sessionId || INITIAL_DEV_SESSION_ID; 
//         setCurrentSessionIdState(newId);
//         localStorage.setItem('aiTutorSessionId', newId);
//     };

//     const setSystemPrompt = (promptText) => {
//         const newPrompt = promptText || defaultSystemPromptText;
//         setSystemPromptState(newPrompt);
//         localStorage.setItem('aiTutorSystemPrompt', newPrompt);
//     };

//     // THIS IS THE SETTER FOR THE SELECTED DOCUMENT
//     const selectDocumentForAnalysis = (documentFile) => { 
//         console.log("AppStateContext: selectDocumentForAnalysis called with:", documentFile);
//         setSelectedDocumentForAnalysisState(documentFile); // documentFile is { originalName, serverFilename } or null
//     };

//     useEffect(() => {
//         document.documentElement.classList.remove('light', 'dark');
//         document.documentElement.classList.add(theme);
//     }, [theme]);

//     useEffect(() => { 
//         if (!currentSessionId) {
//             setSessionId(INITIAL_DEV_SESSION_ID);
//         }
//     }, [currentSessionId]); // Removed setSessionId from dependencies


//     return (
//         <AppStateContext.Provider value={{
//             theme, toggleTheme,
//             selectedLLM, switchLLM,
//             isLeftPanelOpen, setIsLeftPanelOpen,
//             isRightPanelOpen, setIsRightPanelOpen,
//             currentSessionId, setSessionId,
//             systemPrompt, setSystemPrompt,
//             selectedDocumentForAnalysis, selectDocumentForAnalysis // Provide selected doc and its setter
//         }}>
//             {children}
//         </AppStateContext.Provider>
//     );
// };

// frontend/src/contexts/AppStateContext.jsx
// frontend/src/contexts/AppStateContext.jsx
import React, { createContext, useState, useContext, useEffect } from 'react';

export const AppStateContext = createContext(null);

export const useAppState = () => {
    const context = useContext(AppStateContext);
    if (!context) throw new Error('useAppState must be used within an AppStateProvider');
    return context;
};

const INITIAL_DEV_SESSION_ID = `dev-ui-session-${Date.now()}`; 
const defaultSystemPromptText = "You are assessing understanding of engineering/scientific topics..."; // Truncated for brevity

export const AppStateProvider = ({ children }) => {
    const [theme, setThemeState] = useState(() => {
        const storedTheme = localStorage.getItem('theme') || 'dark'; // Default to dark
        console.log("AppStateContext: Initial theme from localStorage or default:", storedTheme);
        // Initial class setting (client-side only)
        if (typeof window !== 'undefined') {
            const root = document.documentElement;
            root.classList.remove('light', 'dark');
            root.classList.add(storedTheme);
        }
        return storedTheme;
    });

    // ... other states (selectedLLM, isLeftPanelOpen, etc. as before) ...
    const [selectedLLM, setSelectedLLM] = useState(localStorage.getItem('selectedLLM') || 'ollama');
    const [isLeftPanelOpen, setIsLeftPanelOpen] = useState(true);
    const [isRightPanelOpen, setIsRightPanelOpen] = useState(true); 
    const [currentSessionId, setCurrentSessionIdState] = useState(() => localStorage.getItem('aiTutorSessionId') || INITIAL_DEV_SESSION_ID);
    const [systemPrompt, setSystemPromptState] = useState(localStorage.getItem('aiTutorSystemPrompt') || defaultSystemPromptText);
    const [selectedDocumentForAnalysis, setSelectedDocumentForAnalysisState] = useState(null);


    const toggleTheme = () => {
        setThemeState(prevTheme => {
            const newTheme = prevTheme === 'light' ? 'dark' : 'light';
            localStorage.setItem('theme', newTheme);
            console.log("AppStateContext: Toggling theme to:", newTheme);
            return newTheme;
        });
    };
    
    // ... switchLLM, setSessionId, setSystemPrompt, selectDocumentForAnalysis ...
    const switchLLM = (llm) => { setSelectedLLM(llm); localStorage.setItem('selectedLLM', llm); };
    const setSessionId = (sessionId) => { /* ... as before ... */ };
    const setSystemPrompt = (promptText) => { /* ... as before ... */ };
    const selectDocumentForAnalysis = (documentFile) => { setSelectedDocumentForAnalysisState(documentFile); };


    // This useEffect is critical for APPLYING the theme class to the HTML element
    useEffect(() => {
        console.log("AppStateContext: Theme useEffect triggered. Current theme state:", theme);
        const rootHtmlElement = document.documentElement;
        rootHtmlElement.classList.remove('light', 'dark'); // Remove any existing
        rootHtmlElement.classList.add(theme); // Add the current theme class
    }, [theme]); // Re-run ONLY when theme state changes

    return (
        <AppStateContext.Provider value={{
            theme, toggleTheme,
            selectedLLM, switchLLM,
            isLeftPanelOpen, setIsLeftPanelOpen,
            isRightPanelOpen, setIsRightPanelOpen,
            currentSessionId, setSessionId,
            systemPrompt, setSystemPrompt,
            selectedDocumentForAnalysis, selectDocumentForAnalysis
        }}>
            {children}
        </AppStateContext.Provider>
    );
};
```

`src/contexts/AuthContext.jsx`

```javascript
// // frontend/src/contexts/AuthContext.jsx (Version 1 - Testing/Development with Bypassed Auth)
// import React, { createContext, useState, useEffect } from 'react';
// // No jwt-decode or real api needed for this fully bypassed version

// export const AuthContext = createContext(null);

// const BYPASS_AUTH_FOR_DEVELOPMENT = true; 

// const MOCK_USER_VERSION_1 = {
//     id: 'devUserV1-001',
//     username: 'DevUI-User',
// };
// const MOCK_TOKEN_VERSION_1 = 'static-mock-dev-token-for-v1-ui-testing';

// export const AuthProvider = ({ children }) => {
//     const [token, setToken] = useState(null);
//     const [user, setUser] = useState(null);
//     const [loading, setLoading] = useState(true); 

//     useEffect(() => {
//         console.log("AuthContext (V1 Testing): Initializing...");
//         if (BYPASS_AUTH_FOR_DEVELOPMENT) {
//             setToken(MOCK_TOKEN_VERSION_1);
//             setUser(MOCK_USER_VERSION_1);
//             // Simulate token storage for other parts of app that might check localStorage
//             localStorage.setItem('authToken', MOCK_TOKEN_VERSION_1); 
//             console.log("AuthContext (V1 Testing): Auth BYPASSED. User set:", MOCK_USER_VERSION_1);
//         } else {
//             // This branch is for non-bypassed mode, not active in V1
//             localStorage.removeItem('authToken');
//             setToken(null);
//             setUser(null);
//         }
//         setLoading(false);
//     }, []);

//     const login = async () => {
//         console.log("AuthContext (V1 Testing): MOCK login called. Auto-success.");
//         setUser(MOCK_USER_VERSION_1);
//         setToken(MOCK_TOKEN_VERSION_1);
//         return { token: MOCK_TOKEN_VERSION_1, username: MOCK_USER_VERSION_1.username, _id: MOCK_USER_VERSION_1.id, sessionId: `dev-session-${Date.now()}` };
//     };
    
//     const signup = async () => {
//         console.log("AuthContext (V1 Testing): MOCK signup called. Auto-success.");
//         setUser(MOCK_USER_VERSION_1);
//         setToken(MOCK_TOKEN_VERSION_1);
//         return { token: MOCK_TOKEN_VERSION_1, username: MOCK_USER_VERSION_1.username, _id: MOCK_USER_VERSION_1.id, sessionId: `dev-session-signup-${Date.now()}` };
//     };

//     const logout = () => {
//         console.log("AuthContext (V1 Testing): MOCK logout called.");
//         setToken(null);
//         setUser(null);
//         localStorage.removeItem('authToken');
//         // In a real app, you'd redirect or App.jsx would show AuthModal
//     };
    
//     const devLogin = () => login({}); // For testing, devLogin just calls mock login

//     return (
//         <AuthContext.Provider value={{ 
//             token, user, loading, login, signup, logout, devLogin, 
//             setUser, setToken, 
//             isTestingMode: BYPASS_AUTH_FOR_DEVELOPMENT // Expose flag
//         }}>
//             {children}
//         </AuthContext.Provider>
//     );
// };








// frontend/src/contexts/AuthContext.jsx
import React, { createContext, useState, useEffect, useCallback } from 'react';
import api from '../services/api.js'; 
import { jwtDecode } from 'jwt-decode';
import toast from 'react-hot-toast'; // IMPORTED

export const AuthContext = createContext(null);

export const DEV_MODE_ALLOW_DEV_LOGIN = true; 
const MOCK_DEV_USERNAME = 'DevUser'; 
const MOCK_DEV_PASSWORD = 'devpassword';   

export const AuthProvider = ({ children }) => {
    const [token, setToken] = useState(localStorage.getItem('authToken'));
    const [user, setUser] = useState(null);
    const [loading, setLoading] = useState(true);

    const parseToken = useCallback((tok) => {
        if (!tok) return null;
        try {
            const decoded = jwtDecode(tok); 
            return { id: decoded.id || decoded.sub || 'mock-user-id', username: decoded.username || 'MockedUser' };
        } catch (e) {
            // console.warn("AuthContext: Failed to decode token (likely a simple mock token):", e.message);
            if (tok && (tok.startsWith('mock-token-') || tok.startsWith('fake-dev-token-'))) { 
                 const usernameFromMockToken = tok.split('-')[2] || MOCK_DEV_USERNAME;
                 return {id: `mock-id-${usernameFromMockToken}`, username: usernameFromMockToken};
            }
            localStorage.removeItem('authToken'); 
            return null;
        }
    }, []);

    useEffect(() => {
        setLoading(true);
        const storedToken = localStorage.getItem('authToken');
        if (storedToken) {
            const decodedUser = parseToken(storedToken);
            if (decodedUser) {
                setUser(decodedUser);
                setToken(storedToken);
            } else {
                setToken(null); setUser(null);
            }
        } else {
            setToken(null); setUser(null);
        }
        setLoading(false);
    }, [parseToken]);

    const login = async (credentials) => {
        const data = await api.login(credentials); 
        localStorage.setItem('authToken', data.token);
        const decodedUser = parseToken(data.token);
        setUser(decodedUser);
        setToken(data.token);
        return data; 
    };
    
    const signup = async (signupData) => {
        const data = await api.signup(signupData); 
        if (data.token) { 
            localStorage.setItem('authToken', data.token);
            const decodedUser = parseToken(data.token);
            setUser(decodedUser);
            setToken(data.token);
        }
        return data;
    };

    const logout = () => {
        localStorage.removeItem('authToken');
        setUser(null);
        setToken(null);
        toast.success("Logged out.");
    };

    const devLogin = async () => { // Ensure it's async
        if (DEV_MODE_ALLOW_DEV_LOGIN) {
            console.log("AuthContext: devLogin initiated.");
            try {
                // This calls the mocked api.login from services/api.js
                const data = await api.login({ username: MOCK_DEV_USERNAME, password: MOCK_DEV_PASSWORD });
                if (data && data.token) { // Check if data and token are returned
                    localStorage.setItem('authToken', data.token);
                    const decodedUser = parseToken(data.token);
                    setUser(decodedUser);
                    setToken(data.token);
                    console.log("AuthContext: Dev Quick Login successful. User:", decodedUser);
                    return data; // Crucially, return the data object
                } else {
                    console.error("AuthContext: Mock api.login for devLogin did not return expected data (token).");
                    throw new Error("Mock API login failed to provide token.");
                }
            } catch (error) {
                console.error("AuthContext: Dev Quick Login via mock api.login failed:", error);
                toast.error(`Dev Login Error: ${error.message}`); // More specific error
                // Do not rethrow here if AuthModal will handle based on null return
                return null; // Indicate failure
            }
        }
        console.warn("devLogin called but DEV_MODE_ALLOW_DEV_LOGIN is false.");
        return null; // Return null if not allowed or if it fails
    };

    return (
        <AuthContext.Provider value={{ 
            token, user, loading, 
            login, signup, logout, 
            devLogin: DEV_MODE_ALLOW_DEV_LOGIN ? devLogin : undefined, 
            setUser, setToken, 
            DEV_MODE_ALLOW_DEV_LOGIN,
            MOCK_DEV_USERNAME, MOCK_DEV_PASSWORD
        }}>
            {children}
        </AuthContext.Provider>
    );
};
```

`src/hooks/useAuth.jsx`

```javascript
import { useContext } from 'react';
import { AuthContext } from '../contexts/AuthContext';

export const useAuth = () => {
    const context = useContext(AuthContext);
    if (!context) {
        throw new Error('useAuth must be used within an AuthProvider');
    }
    return context;
};
```

`src/hooks/useTheme.js`

```javascript
// import { useContext } from 'react';
// import { AppStateContext } from '../contexts/AppStateContext'; // Assuming theme is in AppStateContext

// export const useTheme = () => {
//     const context = useContext(AppStateContext);
//     if (!context) {
//         throw new Error('useTheme must be used within an AppStateProvider');
//     }
//     return { theme: context.theme, toggleTheme: context.toggleTheme };
// };


import { useContext } from 'react';
import { AppStateContext } from '../contexts/AppStateContext.jsx'; // Correct named import for the context object

export const useTheme = () => {
    const context = useContext(AppStateContext); // Use the imported context object
    if (!context) {
        throw new Error('useTheme must be used within an AppStateProvider');
    }
    return { theme: context.theme, toggleTheme: context.toggleTheme };
};
```

`src/hooks/useWebSpeech.js`

```javascript
import { useState, useEffect, useCallback } from 'react';

const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;

export const useWebSpeech = () => {
    const [transcript, setTranscript] = useState('');
    const [listening, setListening] = useState(false);
    const [recognitionInstance, setRecognitionInstance] = useState(null);
    const isSpeechSupported = !!SpeechRecognition;

    useEffect(() => {
        if (!isSpeechSupported) {
            console.warn("Web Speech API is not supported by this browser.");
            return;
        }

        const recognition = new SpeechRecognition();
        recognition.continuous = false; // Set to true if you want it to keep listening
        recognition.interimResults = false; // Set to true for live results
        recognition.lang = 'en-US';

        recognition.onresult = (event) => {
            const currentTranscript = Array.from(event.results)
                .map(result => result[0])
                .map(result => result.transcript)
                .join('');
            setTranscript(currentTranscript);
            // console.log("Voice input result:", currentTranscript);
        };

        recognition.onerror = (event) => {
            console.error("Speech recognition error:", event.error);
            // Handle common errors like 'no-speech', 'audio-capture', 'not-allowed'
            if (event.error === 'not-allowed') {
                alert("Microphone permission denied. Please allow microphone access in your browser settings.");
            }
            setListening(false);
        };

        recognition.onend = () => {
            setListening(false);
            // console.log("Speech recognition ended.");
        };
        
        setRecognitionInstance(recognition);

        // Cleanup
        return () => {
            if (recognition) {
                recognition.stop();
            }
        };
    }, [isSpeechSupported]);

    const startListening = useCallback(() => {
        if (recognitionInstance && !listening) {
            try {
                setTranscript(''); // Clear previous transcript
                recognitionInstance.start();
                setListening(true);
                // console.log("Speech recognition started.");
            } catch (e) {
                console.error("Error starting speech recognition:", e);
                setListening(false); // Ensure listening state is correct
            }
        }
    }, [recognitionInstance, listening]);

    const stopListening = useCallback(() => {
        if (recognitionInstance && listening) {
            recognitionInstance.stop();
            setListening(false); // Manually set as onend might be delayed
            // console.log("Speech recognition stopped manually.");
        }
    }, [recognitionInstance, listening]);

    const resetTranscript = useCallback(() => {
        setTranscript('');
    }, []);


    return {
        transcript,
        listening,
        isSpeechSupported,
        startListening,
        stopListening,
        resetTranscript
    };
};
```

`src/index.css`

```css
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  html {
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    scroll-behavior: smooth;
  }
  body {
    @apply bg-background-dark text-text-dark transition-colors duration-300; 
    font-family: theme('fontFamily.sans');
  }
  html.dark body { @apply bg-background-dark text-text-dark; }
  html:not(.dark) body { @apply bg-background-light text-text-light; }

  .custom-scrollbar {
     @apply scrollbar-thin scrollbar-thumb-secondary dark:scrollbar-thumb-secondary-dark scrollbar-track-surface-light dark:scrollbar-track-gray-800 scrollbar-thumb-rounded-full scrollbar-track-rounded-full;
  }
  .prose { @apply max-w-none text-text-light dark:text-text-dark; }
  .prose code::before, .prose code::after { content: ''; }
  .prose code { @apply px-1 py-0.5 bg-gray-200 dark:bg-gray-700 rounded-sm text-xs font-mono text-primary dark:text-accent; }
  .prose pre { @apply bg-gray-800 dark:bg-gray-900 p-4 rounded-md text-xs text-gray-200 overflow-x-auto custom-scrollbar; }
  .prose pre code { @apply bg-transparent p-0 text-gray-200 font-mono; }
  .prose blockquote { @apply border-l-4 border-primary dark:border-primary-light pl-4 italic text-text-muted-light dark:text-text-muted-dark; }
  .prose a { @apply text-primary dark:text-primary-light hover:underline; }
  .prose strong { @apply font-semibold text-text-light dark:text-text-dark; }
  .prose ul, .prose ol { @apply pl-5; }
  .prose li::marker { @apply text-text-muted-light dark:text-text-muted-dark; }
}

@layer components {
  .btn { 
    @apply font-semibold py-2 px-4 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-offset-1 focus:ring-opacity-75 transition-all duration-150 ease-in-out flex items-center justify-center gap-2 disabled:opacity-60 disabled:cursor-not-allowed;
  }
  .dark .btn { focus-ring-offset-color: theme('colors.background-dark'); }
  html:not(.dark) .btn { focus-ring-offset-color: theme('colors.background-light');}
  
  .btn-primary { 
    @apply btn bg-primary text-white hover:bg-primary-dark focus:ring-primary;
  }
  .btn-secondary {
    @apply btn bg-secondary text-white hover:bg-secondary-dark focus:ring-secondary;
  }
   .btn-ghost { 
    @apply btn text-text-muted-light dark:text-text-muted-dark hover:bg-gray-500 hover:bg-opacity-10 focus:ring-primary;
  }
  .input-field { 
    @apply block w-full px-3 py-2 bg-surface-light dark:bg-gray-700 border border-border-light dark:border-border-dark rounded-md text-sm shadow-sm placeholder-text-muted-light dark:placeholder-text-muted-dark
           focus:outline-none focus:border-primary dark:focus:border-primary-light focus:ring-1 focus:ring-primary dark:focus:ring-primary-light;
  }
  /* Ensuring @tailwindcss/forms classes use our themed input-field styles */
  .form-input, .form-textarea, .form-select, .form-multiselect {
    @apply input-field; 
  }
  .form-checkbox, .form-radio { 
    @apply rounded shadow-sm border-border-light dark:border-border-dark text-primary focus:ring-primary dark:focus:ring-primary-light;
    @apply bg-surface-light dark:bg-gray-700; 
  }

  .card-base { 
    @apply border rounded-panel shadow-panel; 
    @apply bg-surface-light dark:bg-surface-dark border-border-light dark:border-border-dark;
  }
  .card-header-base {
    @apply px-4 py-3 text-sm font-semibold border-b;
    @apply text-text-light dark:text-text-dark border-border-light dark:border-border-dark;
  }
}
```

`src/main.jsx`

```javascript
// import { StrictMode } from 'react'
// import { createRoot } from 'react-dom/client'
// import './index.css'
// import App from './App.jsx'

// createRoot(document.getElementById('root')).render(
//   <StrictMode>
//     <App />
//   </StrictMode>,
// )
import React from 'react'
import ReactDOM from 'react-dom/client'
import { useAppState } from './contexts/AppStateContext.jsx'; // Correct named import
import App from './App.jsx'
import { AuthProvider } from './contexts/AuthContext.jsx'
import { AppStateProvider } from './contexts/AppStateContext.jsx'
import { Toaster } from 'react-hot-toast'; // For notifications
import './index.css' // Tailwind and global styles

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <AuthProvider>
      <AppStateProvider>
        <App />
        <Toaster position="top-right" reverseOrder={false} />
      </AppStateProvider>
    </AuthProvider>
  </React.StrictMode>,
)
```

`src/services/api.js`

```javascript
// // frontend/src/services/api.js (Version 1 - Testing/Development with Static Mocks)

// // This flag is central to this version. All functions will return mock data.
// const DEV_MODE_MOCK_API = true; 

// const mockDelay = (ms = 200) => new Promise(resolve => setTimeout(resolve, ms)); // Shorter delay for faster UI testing

// // --- MOCK DATA STORE ---
// const MOCK_CURRENT_USER = {
//     _id: 'devUser001',
//     username: 'DevUI-User',
//     // Any other user details your UI might display from a /me endpoint (if you had one)
// };

// let MOCK_SESSIONS_STORE = {
//     'session-mock-1': { 
//         sessionId: 'session-mock-1', 
//         updatedAt: new Date(Date.now() - 3600000).toISOString(), 
//         messageCount: 4, 
//         preview: "Conversation about thermodynamics and its applications..." 
//     },
//     'session-mock-2': { 
//         sessionId: 'session-mock-2', 
//         updatedAt: new Date(Date.now() - 7200000).toISOString(), 
//         messageCount: 6, 
//         preview: "Exploring quantum entanglement and its implications for computing..." 
//     },
//     'dev-initial-session-appstate': { // Matches AppStateContext default
//         sessionId: 'dev-initial-session-appstate', 
//         updatedAt: new Date().toISOString(), 
//         messageCount: 2, 
//         preview: "Initial development session with UI focus..."
//     }
// };

// let MOCK_CHAT_HISTORY_STORE = {
//     'session-mock-1': [
//         { _id: 'msg1-1', role: 'user', parts: [{text: "Hello AI tutor! Can you explain the first law of thermodynamics?"}], timestamp: new Date(Date.now() - 3550000).toISOString() },
//         { _id: 'msg1-2', role: 'model', parts: [{text: "Certainly! The first law of thermodynamics, also known as the law of conservation of energy, states that energy cannot be created or destroyed in an isolated system. It can only be transformed from one form to another. \n\nFor example, in a heat engine, chemical energy in fuel is converted into thermal energy, which is then converted into mechanical work."}], thinking: "<thinking>User asked for 1st law. Provided definition and an example.</thinking>", references: [], timestamp: new Date(Date.now() - 3540000).toISOString(), source_pipeline: 'mock_ollama_direct'},
//         { _id: 'msg1-3', role: 'user', parts: [{text: "What about its applications in aerospace engineering?"}], timestamp: new Date(Date.now() - 3500000).toISOString() },
//         { _id: 'msg1-4', role: 'model', parts: [{text: "Great question! In aerospace, it's fundamental for designing jet engines and rocket propulsion systems, analyzing aerodynamic heating, and managing thermal control systems for spacecraft. For instance, understanding energy conversion is key to optimizing engine efficiency [1]."}], thinking: "<thinking>User asked for aerospace applications. Linked to engine design and thermal management. Added a mock reference.</thinking>", references: [{number: 1, source: "Aerospace_Thermo_Principles.pdf", content_preview:"Optimizing jet engine thrust requires careful application of thermodynamic laws..."}], timestamp: new Date(Date.now() - 3400000).toISOString(), source_pipeline: 'mock_ollama_rag'},
//     ],
//     'session-mock-2': [
//         { _id: 'msg2-1', role: 'user', parts: [{text: "Explain quantum entanglement simply."}], timestamp: new Date(Date.now() - 7100000).toISOString() },
//         { _id: 'msg2-2', role: 'model', parts: [{text: "Imagine two coins that are intrinsically linked. If you flip one and observe 'heads', you instantly know the other coin, no matter how far away, will show 'tails' (if they were set up to be opposite). Quantum entanglement is a similar phenomenon where particles become interconnected, and the state of one particle instantly influences the state of the other(s), regardless of the distance separating them. It's a cornerstone of quantum mechanics!"}], thinking: null, references: [], timestamp: new Date(Date.now() - 7000000).toISOString(), source_pipeline: 'mock_gemini_direct'},
//         // ... more messages for session-mock-2
//     ],
//     'dev-initial-session-appstate': [ // Corresponds to AppStateContext initial dev session
//         { _id: 'devmsg1', role: 'user', parts: [{text: "Hi there, this is the initial dev session!"}], timestamp: new Date(Date.now() - 60000).toISOString() },
//         { _id: 'devmsg2', role: 'model', parts: [{text: "Hello Dev User! This is a mocked response for the initial session. The UI looks great!"}], thinking: null, references: [], timestamp: new Date().toISOString(), source_pipeline: 'mock_gemini_direct'},
//     ]
// };

// let MOCK_FILES_STORE_STATIC = [
//     { serverFilename: 'doc-physics-001.pdf', originalName: 'Quantum_Basics.pdf', type: 'application/pdf', size: 204800, lastModified: new Date(Date.now() - 86400000 * 2).toISOString() },
//     { serverFilename: 'doc-eng-002.docx', originalName: 'Thermodynamics_Notes.docx', type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', size: 120500, lastModified: new Date(Date.now() - 86400000).toISOString() },
//     { serverFilename: 'code-python-003.py', originalName: 'simulation_script.py', type: 'text/x-python', size: 15300, lastModified: new Date().toISOString() },
// ];

// const MOCK_ANALYSIS_RESULTS = {
//     faq: {
//         content: "## Frequently Asked Questions (Mocked)\n\n**Q1: What is the main topic of this document?**\nA1: This document primarily discusses [mocked main topic] and its implications in [mocked field].\n\n**Q2: What are the key takeaways?**\nA2: Key takeaways include [mocked takeaway 1], [mocked takeaway 2], and the importance of [mocked concept].\n\n**Q3: Are there any examples provided?**\nA3: Yes, the document illustrates [mocked example scenario] to explain [another mocked concept].",
//         thinking: "<thinking>Generated mock FAQs based on the document's title and a generic structure.</thinking>"
//     },
//     topics: {
//         content: "### Key Topics Extracted (Mocked)\n\n- **Mock Topic A:** Detailed discussion on the foundational principles.\n- **Mock Topic B:** Practical applications and case studies (simulated).\n- **Mock Topic C:** Future research directions and challenges.",
//         thinking: "<thinking>Identified common patterns for topic extraction and populated with placeholder content.</thinking>"
//     },
//     mindmap: {
//         content: `# Mocked Mindmap: Document Title\n## Core Concept\n### Sub-Concept 1\n- Detail 1.A\n- Detail 1.B\n### Sub-Concept 2\n- Detail 2.A\n- Detail 2.B\n## Applications\n### Industry A\n### Research Area B\n## Challenges\n- Limitation X\n- Constraint Y`,
//         thinking: "<thinking>Created a hierarchical Markdown structure suitable for Markmap rendering, using generic terms.</thinking>"
//     }
// };

// const api = {
//     // --- Auth ---
//     login: async (credentials) => {
//         if (!DEV_MODE_MOCK_API) throw new Error("Mock API disabled for login");
//         await mockDelay(500);
//         console.log("MOCK API (V1): login", credentials);
//         const userToLogin = MOCK_USER_DATA['devUser001'];
//         const sessionId = `session-login-${Date.now()}`;
//         MOCK_CHAT_HISTORY_STORE[sessionId] = []; // Initialize history for new session
//         MOCK_SESSIONS_STORE[sessionId] = { sessionId, updatedAt: new Date().toISOString(), messageCount: 0, preview: "New Login Session" };
//         return { 
//             token: `mock-token-${userToLogin.username}-${Date.now()}`, 
//             username: userToLogin.username, 
//             _id: userToLogin._id, 
//             sessionId: sessionId
//         };
//     },
//     signup: async (userData) => {
//         if (!DEV_MODE_MOCK_API) throw new Error("Mock API disabled for signup");
//         await mockDelay(500);
//         console.log("MOCK API (V1): signup", userData);
//         const userToLogin = MOCK_USER_DATA['devUser001']; // Sign up as the main mock user
//         const sessionId = `session-signup-${Date.now()}`;
//         MOCK_CHAT_HISTORY_STORE[sessionId] = [];
//         MOCK_SESSIONS_STORE[sessionId] = { sessionId, updatedAt: new Date().toISOString(), messageCount: 0, preview: "New Signup Session" };
//         return { 
//             token: `mock-signup-token-${userToLogin.username}-${Date.now()}`, 
//             username: userToLogin.username, 
//             _id: userToLogin._id, 
//             sessionId: sessionId
//         };
//     },

//     // --- Chat ---
//     sendMessage: async (payload) => {
//         if (!DEV_MODE_MOCK_API) throw new Error("Mock API disabled for sendMessage");
//         await mockDelay(payload.useRag ? 1000 : 500);
//         console.log("MOCK API (V1): sendMessage", payload);

//         const query = payload.query || "";
//         const llmInUse = payload.llmProvider || 'ollama'; // From AppStateContext via CenterPanel
//         const systemP = payload.systemPrompt || "Default system prompt in use.";

//         const botText = payload.useRag 
//             ? `This is a MOCKED RAG response from ${llmInUse.toUpperCase()} for: "${query.substring(0,25)}...". Based on your document [1] and system prompt starting with "${systemP.substring(0,20)}...". It seems important.`
//             : `This is a MOCK direct response from ${llmInUse.toUpperCase()} for: "${query.substring(0,25)}...". System prompt started with "${systemP.substring(0,20)}...".`;
        
//         const thinking = payload.useRag 
//             ? `<thinking>Query: "${query.substring(0,15)}..."\nLLM: ${llmInUse.toUpperCase()} (RAG)\nSystem Prompt: "${systemP.substring(0,30)}..."\n(Mock) Doc search -> Found relevant info. Synthesizing...</thinking>` 
//             : `<thinking>Query: "${query.substring(0,15)}..."\nLLM: ${llmInUse.toUpperCase()} (Direct)\nSystem Prompt: "${systemP.substring(0,30)}..."\n(Mock) Processing direct query.</thinking>`;
        
//         const references = payload.useRag 
//             ? [{ number: 1, source: MOCK_FILES_STORE_STATIC[0]?.originalName || "mock_source.pdf", content_preview: "This is a snippet from the relevant mock document related to your query..."}] 
//             : [];
        
//         const botMsg = { 
//             id: `bot-${Date.now()}-${Math.random().toString(16).slice(2)}`,
//             role: 'model', 
//             parts: [{text: botText }], 
//             thinking, 
//             references,
//             timestamp: new Date().toISOString(),
//             source_pipeline: payload.useRag ? `mock_${llmInUse}_rag` : `mock_${llmInUse}_direct`
//         };
        
//         // Add to mock history store if session exists
//         if (payload.sessionId) {
//             if (!MOCK_CHAT_HISTORY_STORE[payload.sessionId]) {
//                 MOCK_CHAT_HISTORY_STORE[payload.sessionId] = [];
//             }
//             // Don't add user message here, App.jsx/CenterPanel does it to local state for immediate UI
//             MOCK_CHAT_HISTORY_STORE[payload.sessionId].push(botMsg); // Only add bot message to persistent mock
//             // Update session list
//             if(MOCK_SESSIONS_STORE[payload.sessionId]) {
//                 MOCK_SESSIONS_STORE[payload.sessionId].messageCount = MOCK_CHAT_HISTORY_STORE[payload.sessionId].length;
//                 MOCK_SESSIONS_STORE[payload.sessionId].updatedAt = new Date().toISOString();
//                 MOCK_SESSIONS_STORE[payload.sessionId].preview = botText.substring(0,50) + "...";
//             }
//         }
//         return { reply: botMsg, sessionId: payload.sessionId, source_pipeline: botMsg.source_pipeline };
//     },
//     getChatHistory: async (sessionId) => {
//         if (!DEV_MODE_MOCK_API) throw new Error("Mock API disabled for getChatHistory");
//         await mockDelay();
//         console.log("MOCK API (V1): getChatHistory for session", sessionId);
//         return MOCKED_CHAT_HISTORY_STORE[sessionId] || [];
//     },
//     getChatSessions: async () => {
//         if (!DEV_MODE_MOCK_API) throw new Error("Mock API disabled for getChatSessions");
//         await mockDelay();
//         console.log("MOCK API (V1): getChatSessions");
//         return Object.values(MOCK_SESSIONS_STORE).sort((a,b) => new Date(b.updatedAt) - new Date(a.updatedAt));
//     },
//     startNewSession: async () => {
//         if (!DEV_MODE_MOCK_API) throw new Error("Mock API disabled for startNewSession");
//         await mockDelay();
//         const newSid = `session-mock-${Date.now()}`;
//         MOCK_CHAT_HISTORY_STORE[newSid] = [];
//         MOCK_SESSIONS_STORE[newSid] = { sessionId: newSid, updatedAt: new Date().toISOString(), messageCount: 0, preview: "New Chat Session (Mock)" };
//         console.log("MOCK API (V1): startNewSession, created:", newSid);
//         return { sessionId: newSid };
//     },

//     // --- Files ---
//     uploadFile: async (formData, onUploadProgress) => {
//         if (!DEV_MODE_MOCK_API) throw new Error("Mock API disabled for uploadFile");
//         const file = formData.get('file');
//         const mockFileName = file?.name || 'mock_upload.pdf';
//         console.log("MOCK API (V1): uploadFile", mockFileName);
        
//         if (onUploadProgress) { /* simulate progress */
//             let p=0; const i=setInterval(()=>{p+=20; onUploadProgress({loaded:p,total:100}); if(p>=100) clearInterval(i);},100);
//         }
//         await mockDelay(600);
//         const newFileEntry = { 
//             serverFilename: `mock-server-${Date.now()}-${mockFileName}`, 
//             originalName: mockFileName, 
//             type: file?.type || 'application/octet-stream', 
//             size: file?.size || 12345, 
//             lastModified: new Date().toISOString() 
//         };
//         MOCK_FILES_STORE_STATIC.unshift(newFileEntry); // Add to top of list
//         return { message: `${mockFileName} uploaded (mocked)! Processing initiated.`, filename: newFileEntry.serverFilename, originalname: newFileEntry.originalName };
//     },
//     getFiles: async () => {
//         if (!DEV_MODE_MOCK_API) throw new Error("Mock API disabled for getFiles");
//         await mockDelay();
//         console.log("MOCK API (V1): getFiles");
//         return [...MOCK_FILES_STORE_STATIC]; // Return a copy
//     },
//     renameFile: async (serverFilename, newOriginalName) => {
//          if (!DEV_MODE_MOCK_API) throw new Error("Mock API disabled for renameFile");
//          await mockDelay();
//          console.log("MOCK API (V1): renameFile", serverFilename, "to", newOriginalName);
//          const file = MOCK_FILES_STORE_STATIC.find(f => f.serverFilename === serverFilename);
//          if (file) file.originalName = newOriginalName;
//          return { message: "File renamed (mocked)" };
//     },
//     deleteFile: async (serverFilename) => {
//          if (!DEV_MODE_MOCK_API) throw new Error("Mock API disabled for deleteFile");
//          await mockDelay();
//          console.log("MOCK API (V1): deleteFile", serverFilename);
//          MOCK_FILES_STORE_STATIC = MOCK_FILES_STORE_STATIC.filter(f => f.serverFilename !== serverFilename);
//          return { message: "File deleted (mocked)" };
//     },

//     // --- Analysis ---
//     requestAnalysis: async (payload) => {
//         if (!DEV_MODE_MOCK_API) throw new Error("Mock API disabled for requestAnalysis");
//         await mockDelay(payload.analysis_type === 'mindmap' ? 1500 : 800);
//         console.log("MOCK API (V1): requestAnalysis", payload);
//         const result = MOCK_ANALYSIS_RESULTS[payload.analysis_type] || { content: `No mock data for ${payload.analysis_type} on ${payload.filename}`, thinking: "Used fallback."};
//         return { ...result, content: result.content.replace("Document Title", payload.filename || "Selected Document") };
//     },
    
//     // --- User LLM Config ---
//     updateUserLLMConfig: async (configData) => {
//         if (!DEV_MODE_MOCK_API) throw new Error("Mock API disabled for updateUserLLMConfig");
//         await mockDelay(); 
//         console.log("MOCK API (V1): updateUserLLMConfig", configData);
//         // Simulate saving preference (e.g., to localStorage for mock persistence)
//         localStorage.setItem('mockUserLLMPreference', configData.llmProvider);
//         if(configData.llmProvider === 'gemini' && configData.apiKey) {
//             localStorage.setItem('mockUserGeminiKeyStatus', 'Provided (Mock)');
//         }
//         return { message: `LLM preference updated to ${configData.llmProvider} (mocked).` };
//     },
//     getUserLLMConfig: async () => {
//          if (!DEV_MODE_MOCK_API) throw new Error("Mock API disabled for getUserLLMConfig");
//          await mockDelay();
//          const llmProvider = localStorage.getItem('mockUserLLMPreference') || 'ollama';
//          console.log("MOCK API (V1): getUserLLMConfig, returning:", llmProvider);
//          return { llmProvider }; // Only return provider, not API key
//     },

//     // --- Status & Syllabus ---
//     getOrchestratorStatus: async () => {
//         if (!DEV_MODE_MOCK_API) throw new Error("Mock API disabled for getOrchestratorStatus");
//         await mockDelay(100);
//         return { status: "ok", message: "Backend (Mocked & Healthy)", database_status: "Connected" };
//     },
//     getSyllabus: async (subjectId) => {
//         if(!DEV_MODE_MOCK_API) throw new Error("Mock API disabled for getSyllabus");
//         await mockDelay();
//         console.log("MOCK API (V1): getSyllabus", subjectId);
//         return `# Mock Syllabus: ${subjectId.replace("_"," ")}\n\n- Topic 1: Introduction to ${subjectId}\n- Topic 2: Core Principles\n- Topic 3: Advanced Applications`;
//     }
// };

// export default api;
// // No need to export apiClient in this fully mocked version if it's not used by real calls.
// // export { apiClient }; 









// frontend/src/services/api.js (Version 1 - UI Testing with Full Mocks)
import axios from 'axios'; // Keep for V2 structure, not used by V1 mocks directly

const DEV_MODE_MOCK_API = true; 

const mockDelay = (ms = 200) => new Promise(resolve => setTimeout(resolve, ms));

// --- MOCK DATA STORE - Ensure these are defined AT THE TOP LEVEL of this module ---
const MOCK_USER_DATA_STORE = { 
    'devUser001': { username: 'DevUI-User', _id: 'devUser001' }
};

let MOCK_SESSIONS_STORE = { // Renamed to avoid conflict if you copy-pasted with _API suffix
    'session-mock-1': { sessionId: 'session-mock-1', updatedAt: new Date(Date.now() - 3600000).toISOString(), messageCount: 4, preview: "Thermodynamics basics and applications..." },
    'session-mock-2': { sessionId: 'session-mock-2', updatedAt: new Date(Date.now() - 7200000).toISOString(), messageCount: 6, preview: "Exploring quantum entanglement simply..." },
    'dev-initial-session-appstate': { sessionId: 'dev-initial-session-appstate', updatedAt: new Date().toISOString(), messageCount: 2, preview: "Initial development session for UI testing..." }
};

let MOCK_CHAT_HISTORY_STORE = { // Renamed
    'session-mock-1': [
        { id: 's1msg1', _id: 's1msg1', role: 'user', parts: [{text: "Hello AI tutor! Can you explain the first law of thermodynamics?"}], timestamp: new Date(Date.now() - 3550000).toISOString() },
        { id: 's1msg2', _id: 's1msg2', role: 'model', parts: [{text: "Certainly! The first law of thermodynamics, also known as the law of conservation of energy, states that energy cannot be created or destroyed in an isolated system. It can only be transformed from one form to another. \n\nFor example, in a heat engine, chemical energy in fuel is converted into thermal energy, which is then converted into mechanical work."}], thinking: "<thinking>User asked for 1st law. Provided definition and an example.</thinking>", references: [], timestamp: new Date(Date.now() - 3540000).toISOString(), source_pipeline: 'mock_ollama_direct'},
        { id: 's1msg3', _id: 's1msg3', role: 'user', parts: [{text: "What about its applications in aerospace engineering?"}], timestamp: new Date(Date.now() - 3500000).toISOString() },
        { id: 's1msg4', _id: 's1msg4', role: 'model', parts: [{text: "Great question! In aerospace, it's fundamental for designing jet engines and rocket propulsion systems (analyzing thrust from energy conversion), understanding aerodynamic heating on re-entry vehicles, and managing thermal control systems for satellites and spacecraft to maintain operational temperatures in the vacuum of space. For instance, the energy balance for a jet engine directly applies this law [1]."}], thinking: "<thinking>User asked for aerospace applications. Linked to engine design and thermal management. Added a mock reference.</thinking>", references: [{number: 1, source: "Aerospace_Thermo_Principles_Vol1.pdf", content_preview:"The first law is applied to calculate the energy changes as air and fuel pass through a jet engine, determining available thrust..."}], timestamp: new Date(Date.now() - 3400000).toISOString(), source_pipeline: 'mock_ollama_rag'},
    ],
    'dev-initial-session-appstate': [
        { id: 'devmsg1', _id: 'devmsg1', role: 'user', parts: [{text: "Hi there, this is the initial dev session for UI testing!"}], timestamp: new Date(Date.now() - 60000).toISOString() },
        { id: 'devmsg2', _id: 'devmsg2', role: 'model', parts: [{text: "Hello Dev User! Welcome to the UI testing environment. All systems are currently using mock data. Feel free to explore!"}], thinking: null, references: [], timestamp: new Date().toISOString(), source_pipeline: 'mock_gemini_direct'},
    ]
};

let MOCK_FILES_STORE = [ // Renamed
    { serverFilename: 'doc-quantum-001.pdf', originalName: 'Quantum_Entanglement_Intro.pdf', type: 'application/pdf', size: 305800, lastModified: new Date(Date.now() - 86400000 * 3).toISOString() },
    { serverFilename: 'doc-thermo-002.docx', originalName: 'Aerospace_Thermo_Principles_Vol1.docx', type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', size: 150200, lastModified: new Date(Date.now() - 86400000 * 2).toISOString() },
    { serverFilename: 'code-rocket-sim-003.py', originalName: 'rocket_trajectory_sim.py', type: 'text/x-python', size: 25700, lastModified: new Date(Date.now() - 86400000).toISOString() },
];

let MOCK_ANALYSIS_RESULTS = { // Renamed
    faq: { content: "## Mocked FAQs for Selected Document\n\n**Q1: What is this?**\nA1: A mock FAQ section.", thinking: "Generated mock FAQs." },
    topics: { content: "### Mock Key Topics\n\n- Mock Topic Alpha\n- Mock Topic Beta", thinking: "Identified mock topics." },
    mindmap: { content: `# Mocked Mindmap: Selected Document\n## Central Theme\n### Key Concept A\n### Key Concept B`, thinking: "Created mock mindmap structure." }
};
// --- END OF MOCK DATA STORE ---


const apiClient = axios.create({ // This is for V2
    baseURL: import.meta.env.VITE_API_BASE_URL || 'http://localhost:5001/api',
});
apiClient.interceptors.request.use(config => { /* ... as before ... */ });


const api = {
    login: async (credentials) => {
        if (DEV_MODE_MOCK_API) {
            await mockDelay(400); 
            console.log("MOCK API (V1): login attempt", credentials);
            const username = credentials.username || 'DevUser';
            const userToLogin = MOCK_USER_DATA_STORE['devUser001'] || { username: username, _id: `mock-id-${username}` };
            
            const sessionId = `session-login-${Date.now()}`;
            
            // Initialize stores if they were somehow cleared (shouldn't happen at module scope but defensive)
            if (!MOCK_CHAT_HISTORY_STORE) MOCK_CHAT_HISTORY_STORE = {};
            if (!MOCK_SESSIONS_STORE) MOCK_SESSIONS_STORE = {};

            MOCK_CHAT_HISTORY_STORE[sessionId] = []; 
            MOCK_SESSIONS_STORE[sessionId] = { 
                sessionId, 
                updatedAt: new Date().toISOString(), 
                messageCount: 0, 
                preview: "New Session (Mock Login)" 
            };
            
            return { 
                token: `mock-token-for-${userToLogin.username}-${Date.now()}`, 
                username: userToLogin.username, 
                _id: userToLogin._id, 
                sessionId: sessionId
            };
        }
        // Real call for V2
        const response = await apiClient.post('/auth/signin', credentials);
        return response.data;
    },

    signup: async (userData) => {
        if (DEV_MODE_MOCK_API) {
            await mockDelay(400);
            console.log("MOCK API (V1): signup attempt", userData);
            const sessionId = `session-signup-${Date.now()}`;

            if (!MOCK_CHAT_HISTORY_STORE) MOCK_CHAT_HISTORY_STORE = {};
            if (!MOCK_SESSIONS_STORE) MOCK_SESSIONS_STORE = {};

            MOCK_CHAT_HISTORY_STORE[sessionId] = [];
            MOCK_SESSIONS_STORE[sessionId] = { sessionId, updatedAt: new Date().toISOString(), messageCount: 0, preview: "New Session (Mock Signup)" };
            return { 
                token: `mock-signup-token-${userData.username}-${Date.now()}`, 
                username: userData.username, 
                _id: `mock-id-${userData.username}`, 
                sessionId: sessionId 
            };
        }
        const response = await apiClient.post('/auth/signup', userData);
        return response.data;
    },

    sendMessage: async (payload) => {
        if (DEV_MODE_MOCK_API) {
            await mockDelay(payload.useRag ? 800 : 400); console.log("MOCK API (V1): sendMessage", payload);
            const query = payload.query || ""; const llmInUse = payload.llmProvider || 'ollama'; const systemP = payload.systemPrompt || "Default prompt.";
            const botText = payload.useRag 
                ? `This is a MOCKED RAG response from ${llmInUse.toUpperCase()} for: "${query.substring(0,25)}...". Considering your system prompt for a "${systemP.substring(0,20)}..." style, document [1] offers insights.`
                : `This is a MOCK direct response from ${llmInUse.toUpperCase()} for: "${query.substring(0,25)}...". Your system prompt mode: "${systemP.substring(0,20)}...".`;
            const thinking = payload.useRag ? `<thinking>Query: "${query.substring(0,15)}..."\nLLM: ${llmInUse.toUpperCase()} (RAG)\nSystem Prompt: "${systemP.substring(0,30)}..."\n(Mock) Found context in '${MOCK_FILES_STORE[0]?.originalName || "mock_doc.pdf"}'.</thinking>` : `<thinking>Query: "${query.substring(0,15)}..."\nLLM: ${llmInUse.toUpperCase()} (Direct)\nSystem Prompt: "${systemP.substring(0,30)}..."\n(Mock) Processing direct query.</thinking>`;
            const references = payload.useRag ? [{ number: 1, source: MOCK_FILES_STORE[0]?.originalName || "default_mock.pdf", content_preview: "This is a snippet from the relevant mock document related to your query..."}] : [];
            const botMsg = { id: `bot-${Date.now()}`, role: 'model', parts: [{text: botText }], thinking, references, timestamp: new Date().toISOString(), source_pipeline: payload.useRag ? `mock_${llmInUse}_rag` : `mock_${llmInUse}_direct`};
            if (payload.sessionId) {
                if (!MOCK_CHAT_HISTORY_STORE[payload.sessionId]) MOCK_CHAT_HISTORY_STORE[payload.sessionId] = [];
                MOCK_CHAT_HISTORY_STORE[payload.sessionId].push(botMsg); 
                if(MOCK_SESSIONS_STORE[payload.sessionId]) { MOCK_SESSIONS_STORE[payload.sessionId].messageCount = (MOCK_SESSIONS_STORE[payload.sessionId].messageCount || 0) + 2; MOCK_SESSIONS_STORE[payload.sessionId].updatedAt = new Date().toISOString(); MOCK_SESSIONS_STORE[payload.sessionId].preview = botText.substring(0,50) + "..."; }
            }
            return { reply: botMsg, sessionId: payload.sessionId, source_pipeline: botMsg.source_pipeline };
        }
        const response = await apiClient.post('/chat/message', payload); return response.data;
    },

    getChatHistory: async (sessionId) => {
        if (DEV_MODE_MOCK_API) {
            await mockDelay(150); console.log("MOCK API (V1): getChatHistory for", sessionId);
            if (!MOCK_CHAT_HISTORY_STORE) MOCK_CHAT_HISTORY_STORE = {}; // Defensive
            return MOCK_CHAT_HISTORY_STORE[sessionId] || [];
        }
        const response = await apiClient.get(`/chat/history/${sessionId}`); return response.data;
    },

    getChatSessions: async () => {
        if (DEV_MODE_MOCK_API) {
            await mockDelay(150); console.log("MOCK API (V1): getChatSessions");
            if (!MOCK_SESSIONS_STORE) MOCK_SESSIONS_STORE = {}; // Defensive
            return Object.values(MOCK_SESSIONS_STORE).sort((a,b) => new Date(b.updatedAt) - new Date(a.updatedAt));
        }
        const response = await apiClient.get('/chat/sessions'); return response.data;
    },

    startNewSession: async () => {
        if (DEV_MODE_MOCK_API) {
            await mockDelay(50); const newSid = `session-mock-new-${Date.now()}`;
            if (!MOCK_CHAT_HISTORY_STORE) MOCK_CHAT_HISTORY_STORE = {}; // Defensive
            if (!MOCK_SESSIONS_STORE) MOCK_SESSIONS_STORE = {}; // Defensive
            MOCK_CHAT_HISTORY_STORE[newSid] = [];
            MOCK_SESSIONS_STORE[newSid] = { sessionId: newSid, updatedAt: new Date().toISOString(), messageCount: 0, preview: "Newly Started Mock Session" };
            console.log("MOCK API (V1): startNewSession, created:", newSid);
            return { sessionId: newSid };
        }
        const response = await apiClient.post('/chat/new_session', {}); return response.data;
    },

    uploadFile: async (formData, onUploadProgress) => {
        if (DEV_MODE_MOCK_API) {
            const file = formData.get('file'); const mockFileName = file?.name || 'mock_upload.pdf';
            console.log("MOCK API (V1): uploadFile", mockFileName);
            if(onUploadProgress){ let p=0;const i=setInterval(()=>{p+=25;onUploadProgress({loaded:p,total:100});if(p>=100)clearInterval(i);},80);}
            await mockDelay(400);
            const newFileEntry = { serverFilename: `mock-server-${Date.now()}-${mockFileName}`, originalName: mockFileName, type: file?.type || 'application/octet-stream', size: file?.size || Math.floor(Math.random()*100000), lastModified: new Date().toISOString() };
            if (!MOCK_FILES_STORE) MOCK_FILES_STORE = []; // Defensive
            MOCK_FILES_STORE.unshift(newFileEntry);
            return { message: `${mockFileName} uploaded (mocked)!`, filename: newFileEntry.serverFilename, originalname: newFileEntry.originalName };
        }
        const response = await apiClient.post('/upload', formData, { headers: { 'Content-Type': 'multipart/form-data' }, onUploadProgress }); return response.data;
    },

    getFiles: async () => {
        if (DEV_MODE_MOCK_API) { 
            await mockDelay(100); console.log("MOCK API (V1): getFiles"); 
            if (!MOCK_FILES_STORE) MOCK_FILES_STORE = []; // Defensive
            return [...MOCK_FILES_STORE]; 
        }
        const response = await apiClient.get('/files'); return response.data;
    },

    renameFile: async (serverFilename, newOriginalName) => {
         if (DEV_MODE_MOCK_API) {
            await mockDelay(); console.log("MOCK API (V1): renameFile", serverFilename, "to", newOriginalName);
            if (!MOCK_FILES_STORE) MOCK_FILES_STORE = []; // Defensive
            const file = MOCK_FILES_STORE.find(f => f.serverFilename === serverFilename);
            if (file) file.originalName = newOriginalName;
            return { message: "File renamed (mocked)" };
        }
        const response = await apiClient.patch(`/files/${serverFilename}`, { newOriginalName }); return response.data;
    },

    deleteFile: async (serverFilename) => {
         if (DEV_MODE_MOCK_API) {
            await mockDelay(); console.log("MOCK API (V1): deleteFile", serverFilename);
            if (!MOCK_FILES_STORE) MOCK_FILES_STORE = []; // Defensive
            MOCK_FILES_STORE = MOCK_FILES_STORE.filter(f => f.serverFilename !== serverFilename);
            return { message: "File deleted (mocked)" };
        }
        const response = await apiClient.delete(`/files/${serverFilename}`); return response.data;
    },

    requestAnalysis: async (payload) => {
        if (DEV_MODE_MOCK_API) {
            await mockDelay(payload.analysis_type === 'mindmap' ? 1200 : 600);
            console.log("MOCK API (V1): requestAnalysis", payload);
            if (!MOCK_ANALYSIS_RESULTS) MOCK_ANALYSIS_RESULTS = {}; // Defensive
            const result = MOCK_ANALYSIS_RESULTS[payload.analysis_type] || { content: `No mock data for ${payload.analysis_type} on ${payload.filename}`, thinking: "Used fallback."};
            return { ...result, content: result.content.replace("Selected Document", payload.filename || "the Document") };
        }
        const response = await apiClient.post('/analysis/document', payload); return response.data;
    },

    updateUserLLMConfig: async (configData) => {
        if (DEV_MODE_MOCK_API) { 
            await mockDelay(); console.log("MOCK API (V1): updateUserLLMConfig", configData);
            localStorage.setItem('mockUserLLMPreference', configData.llmProvider);
            if(configData.llmProvider === 'gemini' && configData.apiKey) localStorage.setItem('mockUserGeminiKeyStatus_V1', 'ProvidedDuringMock');
            if(configData.llmProvider === 'ollama' && configData.ollamaUrl) localStorage.setItem('mockUserOllamaUrl_V1', configData.ollamaUrl);
            return { message: `LLM preference updated (mocked).` };
        }
        const response = await apiClient.post('/user/config/llm', configData); return response.data;
    },

    getUserLLMConfig: async () => {
         if (DEV_MODE_MOCK_API) {
            await mockDelay(); const llmProvider = localStorage.getItem('mockUserLLMPreference') || 'ollama';
            console.log("MOCK API (V1): getUserLLMConfig, returning:", llmProvider);
            return { llmProvider };
        }
        const response = await apiClient.get('/user/config/llm'); return response.data;
    },

    getOrchestratorStatus: async () => {
        if (DEV_MODE_MOCK_API) { 
            await mockDelay(50); 
            return { status: "ok", message: "Backend (Mocked & Online)", database_status: "Connected (Mock)" };
        }
        const baseUrlForHealth = (import.meta.env.VITE_API_BASE_URL || 'http://localhost:5001/api').replace('/api', '');
        const response = await axios.get(`${baseUrlForHealth}/api/health`);
        return response.data;
    },

    getSyllabus: async (subjectId) => {
        if(DEV_MODE_MOCK_API) { 
            await mockDelay(); console.log("MOCK API (V1): getSyllabus for", subjectId);
            return `# Mock Syllabus: ${subjectId}\n\n- Section 1: Intro to ${subjectId}\n- Section 2: Core Principles`;
        }
        const response = await apiClient.get(`/syllabus/${subjectId}`); return response.data;
    }
};

export default api;
```

`src/utils/helpers.js`

```javascript
// Debounce function: Limits the rate at which a function can fire.
export const debounce = (func, delay) => {
    let timeoutId;
    return function(...args) {
        const context = this;
        clearTimeout(timeoutId);
        timeoutId = setTimeout(() => func.apply(context, args), delay);
    };
};

// Throttle function: Ensures a function is called at most once in a specified time period.
export const throttle = (func, limit) => {
    let inThrottle;
    let lastFunc;
    let lastRan;
    return function(...args) {
        const context = this;
        if (!inThrottle) {
            func.apply(context, args);
            lastRan = Date.now();
            inThrottle = true;
            setTimeout(() => {
                inThrottle = false;
                if (lastFunc) {
                    lastFunc.apply(context, args); // Call with latest args if throttled
                    lastRan = Date.now();
                }
            }, limit);
        } else {
            lastFunc = func; // Store the latest call
        }
    };
};

// Simple function to format file size
export const formatFileSize = (bytes, decimals = 2) => {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const dm = decimals < 0 ? 0 : decimals;
    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
};

// Function to generate a simple unique ID (for client-side list keys, etc.)
export const generateUniqueId = (prefix = 'id') => {
    return `${prefix}-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
};

// Function to safely get nested property
export const getNestedValue = (obj, path, defaultValue = undefined) => {
    const value = path.split('.').reduce((acc, part) => acc && acc[part], obj);
    return value === undefined ? defaultValue : value;
};

// Basic HTML escape (can be more comprehensive)
export const escapeHtml = (unsafe) => {
    if (typeof unsafe !== 'string') return '';
    return unsafe
         .replace(/&/g, "&")
         .replace(/</g, "<")
         .replace(/>/g, ">")
         .replace(/"/g, '"')
         .replace(/'/g, "'");
};

// You can add more utility functions here as your project grows.
// For example, date formatting, string manipulation, etc.

// Example: Truncate text
export const truncateText = (text, maxLength = 100) => {
    if (!text || text.length <= maxLength) return text;
    return text.substring(0, maxLength) + '...';
};
```

`tailwind.config.js`

```javascript
/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  darkMode: 'class',
  theme: {
    extend: {
      colors: {
        'primary': { light: '#60a5fa', DEFAULT: '#3b82f6', dark: '#2563eb' },
        'secondary': { light: '#9ca3af', DEFAULT: '#6b7280', dark: '#4b5563' },
        'accent': '#2dd4bf', 
        'background-dark': '#0F172A', 'surface-dark': '#1E293B', 'border-dark': '#334155', 'text-dark': '#E2E8F0', 'text-muted-dark': '#94A3B8',
        'background-light': '#F8FAFC', 'surface-light': '#FFFFFF', 'border-light': '#E2E8F0', 'text-light': '#0F172A', 'text-muted-light': '#64748B',
      },
      fontFamily: {
        sans: ['"Inter var"', 'Inter', 'system-ui', 'sans-serif'],
      },
      boxShadow: {
        'main': '0 4px 15px -5px rgba(0,0,0,0.07), 0 2px 8px -6px rgba(0,0,0,0.07)',
        'panel': '0 8px 20px -5px rgba(0,0,0,0.1), 0 4px 10px -6px rgba(0,0,0,0.08)',
        'card-hover': '0 6px 18px -4px rgba(0,0,0,0.1), 0 3px 10px -5px rgba(0,0,0,0.1)',
      },
      borderRadius: { 'xl': '0.75rem', '2xl': '1rem', 'panel': '0.75rem' },
      keyframes: {
        fadeIn: { '0%': { opacity: '0', transform: 'translateY(5px)' }, '100%': { opacity: '1', transform: 'translateY(0px)' } },
        slideUp: { '0%': { transform: 'translateY(10px)', opacity: '0' }, '100%': { transform: 'translateY(0)', opacity: '1' } },
        pulseDots: {
          '0%, 100%': { opacity: '0.3', transform: 'scale(0.8)' },
          '50%': { opacity: '1', transform: 'scale(1)' },
        }
      },
      animation: {
        fadeIn: 'fadeIn 0.3s ease-out forwards',
        slideUp: 'slideUp 0.4s ease-out forwards',
        pulseDot1: 'pulseDots 1.4s infinite 0s ease-in-out',
        pulseDot2: 'pulseDots 1.4s infinite 0.2s ease-in-out',
        pulseDot3: 'pulseDots 1.4s infinite 0.4s ease-in-out',
      }
    },
  },
  plugins: [
    require('@tailwindcss/forms')({ strategy: 'class' }),
    require('tailwind-scrollbar')({ nocompatible: true }),
  ],
}
```

`vite.config.js`

```javascript
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vite.dev/config/
export default defineConfig({
  plugins: [react()],
})

```

